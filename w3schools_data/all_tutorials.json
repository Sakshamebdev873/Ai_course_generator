[
  {
    "tutorial": "Python",
    "title": "Python Tutorial",
    "url": "https://www.w3schools.com/python/default.asp",
    "content": "Python Tutorial\nLearn Python\nPython is a popular programming language.\nPython can be used on a server to create web applications.\nTip: Sign in to track your progress - it's free.\nLearning by Examples\nWith our \"Try it Yourself\" editor, you can edit Python code and view the result.\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nPython File Handling\nIn our File Handling section you will learn how to open, read, write, and \ndelete files.\nPython File Handling\nPython Database Handling\nIn our database section you will learn how to access and work with MySQL and MongoDB databases:\nPython MySQL Tutorial\nPython MongoDB Tutorial\nPython Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all Python Exercises\nPython Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All Python Examples\nPython Quiz\nTest your Python skills with a quiz.\nPython Quiz\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nPython Reference\nYou will also find complete function and method references:\nReference Overview\nBuilt-in Functions\nString Methods\nList/Array Methods\nDictionary Methods\nTuple Methods\nSet Methods\nFile Methods\nPython Keywords\nPython Exceptions\nPython Glossary\nRandom Module\nRequests Module\nMath Module\nCMath Module\nDownload Python\nDownload Python from the official Python web site: https://python.org\nKickstart your career\nGet certified by completing the course",
    "scraped_at": "2025-08-29T13:26:48.069171"
  },
  {
    "tutorial": "Python",
    "title": "Introduction to Python",
    "url": "https://www.w3schools.com/python/python_intro.asp",
    "content": "Python Introduction\nWhat is Python?\nPython is a popular programming language. It was created by Guido van Rossum, \nand released in 1991.\nIt is used for:\nweb development (server-side),\nsoftware development,\nmathematics,\nsystem scripting.\nWhat can Python do?\nPython can be used on a server to create web applications.\nPython can be used alongside software to create workflows.\nPython can connect to database systems. It can also read and modify files.\nPython can be used to handle big data and perform complex mathematics.\nPython can be used for rapid prototyping, or for production-ready software development.\nWhy Python?\nPython works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).\nPython has a simple syntax similar to the English language.\nPython has syntax that allows developers to write programs with fewer lines than some other programming languages.\nPython runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.\nPython can be treated in a procedural way, an object-oriented way or a functional way.\nGood to know\nThe most recent major version of Python is Python 3, which we shall be using in this tutorial.\nIn this tutorial Python will be written in a text editor. It is possible to write Python in an Integrated Development Environment, such as Thonny, Pycharm, Netbeans or Eclipse which are particularly useful when managing larger collections of Python files.\nPython Syntax compared to other programming languages\nPython was designed for readability, and has some similarities to the English language with influence from mathematics.\nPython uses new lines to complete a command, as opposed to other programming languages which often use semicolons or parentheses.\nPython relies on indentation, using whitespace, to define scope; such as the scope of loops, functions and classes. Other programming languages often use curly-brackets for this purpose.\nExample\nVideo: Python Introduction",
    "scraped_at": "2025-08-29T13:26:51.418151"
  },
  {
    "tutorial": "Python",
    "title": "Python Getting Started",
    "url": "https://www.w3schools.com/python/python_getstarted.asp",
    "content": "Python Getting Started\nPython Install\nMany PCs and Macs will have python already installed.\nTo check if you have python installed on a Windows PC, search in the start bar for Python or run the following on the Command Line (cmd.exe):\nTo check if you have python installed on a Linux or Mac, then on linux open the command line or on Mac open the Terminal and type:\nIf you find that you do not have Python installed on your computer, then you can download it for free from the following website: https://www.python.org/\nPython Quickstart\nPython is an interpreted programming language, this means that as a developer you write Python (.py) files in a text editor and then put those files into the python interpreter to be executed.\nLet's write our first Python file, called hello.py , which can be done in any text editor:\nhello.py\nhello.py :\nhello.py\nprint(\"Hello, World!\")\nSimple as that. Save your file. Open your command line, navigate to the directory where you saved your file, and run:\nThe output should be:\nCongratulations, you have written and executed your first Python program.\nW3Schools' Python Editor\nWe have an online Python editor where you can execute your own Python code and see the result:\nExample\nTry our online Python editor:\nThis editor will be used in the entire tutorial to demonstrate the different aspects of Python.\nPython Version\nTo check the Python version of the editor, you can find it by importing the sys module:\nsys\nExample\nCheck the Python version of the editor:\nYou will learn more about importing modules in our Python Modules chapter.\nThe Python Command Line\nTo test a short amount of code in python sometimes it is quickest and easiest not to write the code in a file. This is made possible because Python can be run as a command line itself.\nType the following on the Windows, Mac or Linux command line:\nFrom there you can write any python code, including our hello world example from earlier in the tutorial:\nWhich will write \"Hello, World!\" in the command line:\nWhenever you are done in the python command line, you can simply type the following to quit the python command line interface:\nVideo: Python Get Started",
    "scraped_at": "2025-08-29T13:26:54.623219"
  },
  {
    "tutorial": "Python",
    "title": "Python Syntax",
    "url": "https://www.w3schools.com/python/python_syntax.asp",
    "content": "Python Syntax\nExecute Python Syntax\nAs we learned in the previous page, Python syntax can be executed by writing directly in the Command Line:\nOr by creating a python file on the server, using the .py file extension, and running it in the Command Line:\nPython Indentation\nIndentation refers to the spaces at the beginning of a code line.\nWhere in other programming languages the indentation in code is for readability \nonly, the indentation in Python is very important.\nPython uses indentation to indicate a block of code.\nExample\nPython will give you an error if you skip the indentation:\nExample\nSyntax Error:\nThe number of spaces is up to you as a programmer, the most common use is four, but it has \nto be at least one.\nExample\nYou have to use the same number of spaces in the same block of code, \notherwise Python will give you an error:\nExample\nSyntax Error:\nPython Variables\nIn Python, variables are created when you assign a value to it: Example Variables in Python: x = 5 y = \"Hello, World!\" Try it Yourself » Python has no command for declaring a variable. You will learn more about variables in the Python Variables chapter. Comments Python has commenting capability for the purpose of in-code documentation. Comments start with a # , and Python will render the rest of the line as a comment: Example Comments in Python: #This is a comment. print(\"Hello, World!\") Try it Yourself » Video: Python Syntax ❮ Previous Next ❯\nExample\nVariables in Python:\nPython has no command for declaring a variable.\nYou will learn more about variables in the Python Variables chapter.\nComments\nPython has commenting capability for the purpose of in-code documentation.\nComments start with a # , and Python will render the rest of the line as a comment: Example Comments in Python: #This is a comment. print(\"Hello, World!\") Try it Yourself » Video: Python Syntax ❮ Previous Next ❯\n#\nExample\nComments in Python:\nVideo: Python Syntax",
    "scraped_at": "2025-08-29T13:26:57.673991"
  },
  {
    "tutorial": "Python",
    "title": "Python Comments",
    "url": "https://www.w3schools.com/python/python_comments.asp",
    "content": "Python Comments\nComments can be used to explain Python code.\nComments can be used to make the code more readable.\nComments can be used to prevent execution when testing code.\nCreating a Comment\nComments starts with a # , and Python will \nignore them:\n#\nExample\nComments can be placed at the end of a line, and Python will ignore the rest \nof the line:\nExample\nA comment does not have to be text that explains the code, it can also be used to \nprevent Python from executing code:\nExample\nMultiline Comments\nPython does not really have a syntax for multiline comments.\nTo add a multiline comment you could insert a # for each line:\n#\nExample\nOr, not quite as intended, you can use a multiline string.\nSince Python will ignore string literals that are not assigned to a variable, you can add a multiline string (triple quotes) in your code, and place your comment inside it:\nExample\nAs long as the string is not assigned to a variable, Python will read the code, but then ignore it, and you have made a multiline comment.\nVideo: Python Comments",
    "scraped_at": "2025-08-29T13:27:00.960471"
  },
  {
    "tutorial": "Python",
    "title": "Python Variables",
    "url": "https://www.w3schools.com/python/python_variables.asp",
    "content": "Python Variables\nVariables\nVariables are containers for storing data values.\nCreating Variables\nPython has no command for declaring a variable.\nA variable is created the moment you first assign a value to it.\nExample\nVariables do not need to be declared with any particular type , and can even change type after they have been set.\nExample\nCasting\nIf you want to specify the data type of a variable, this can be done with casting.\nExample\nGet the Type\nYou can get the data type of a variable with the type() function.\ntype()\nExample\nSingle or Double Quotes?\nString variables can be declared either by using single or double quotes:\nExample\nCase-Sensitive\nVariable names are case-sensitive.\nExample\nThis will create two variables:\nVideo: Python Variables",
    "scraped_at": "2025-08-29T13:27:05.633289"
  },
  {
    "tutorial": "Python",
    "title": "Python - Variable Names",
    "url": "https://www.w3schools.com/python/python_variables_names.asp",
    "content": "Python - Variable Names\nVariable Names\nA variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume).\nRules for Python variables:\nA variable name must start with a letter or the underscore character\nA variable name cannot start with a number\nA variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )\nVariable names are case-sensitive (age, Age and AGE are three different variables)\nA variable name cannot be any of the Python keywords .\nExample\nLegal variable names:\nExample\nIllegal variable names:\nRemember that variable names are case-sensitive\nMulti Words Variable Names\nVariable names with more than one word can be difficult to read.\nThere are several techniques you can use to make them more readable:\nCamel Case\nEach word, except the first, starts with a capital letter:\nPascal Case\nEach word starts with a capital letter:\nSnake Case\nEach word is separated by an underscore character:\nVideo: Python Variable Names",
    "scraped_at": "2025-08-29T13:27:08.854325"
  },
  {
    "tutorial": "Python",
    "title": "Python Variables - Assign Multiple Values",
    "url": "https://www.w3schools.com/python/python_variables_multiple.asp",
    "content": "Python Variables - Assign Multiple Values\nMany Values to Multiple Variables\nPython allows you to assign values to multiple variables in one line:\nExample\nNote: Make sure the number of variables matches the number of values, or else you will get an error.\nOne Value to Multiple Variables\nAnd you can assign the same value to multiple variables in one line:\nExample\nUnpack a Collection\nIf you have a collection of values in a list , tuple etc.\nPython allows you to extract the values into variables. This is called unpacking .\nlist\ntuple\nExample\nUnpack a list:\nLearn more about unpacking in our Unpack Tuples Chapter.\nVideo: Python Variable Names",
    "scraped_at": "2025-08-29T13:27:12.239042"
  },
  {
    "tutorial": "Python",
    "title": "Python - Output Variables",
    "url": "https://www.w3schools.com/python/python_variables_output.asp",
    "content": "Python - Output Variables\nOutput Variables\nThe Python print() function is often used to output variables.\nprint()\nExample\nIn the print() function, you output multiple \nvariables, separated by a comma:\nprint()\nExample\nYou can also use the + operator to output \nmultiple variables:\n+\nExample\nNotice the space character after \"Python \" and \"is \" ,\n  without them the result would be \"Pythonisawesome\".\n\"Python \"\n\"is \"\nFor numbers, the + character works as a mathematical operator:\n+\nExample\nIn the print() function, when you try to \ncombine a string and a number with the + operator, Python will give you an error:\nprint()\n+\nExample\nThe best way to output multiple variables in the print() function is to separate them with commas,\nwhich even support different data types:\nprint()\nExample\nVideo: Python Output Variables",
    "scraped_at": "2025-08-29T13:27:15.884190"
  },
  {
    "tutorial": "Python",
    "title": "Python - Global Variables",
    "url": "https://www.w3schools.com/python/python_variables_global.asp",
    "content": "Python - Global Variables\nGlobal Variables\nVariables that are created outside of a function (as in all of the examples \nin the previous pages) are known as global variables.\nGlobal variables can be used by everyone, both inside of \nfunctions and outside.\nExample\nCreate a variable outside of a function, and use it inside the function\nIf you create a variable with the same name inside a function, this variable \nwill be local, and can only be used inside the function. The global variable \nwith the same name will remain as it was, global and with the original value.\nExample\nCreate a variable inside a function, with the same name as the global \n  variable\nThe global Keyword\nNormally, when you create a variable inside a function, that variable is \nlocal, and can only be used inside that function.\nTo create a global variable inside a function, you can use the global keyword.\nglobal\nExample\nIf you use the global keyword, the variable belongs to the global scope:\nglobal\nAlso, use the global keyword if you want to change a global variable inside a function.\nglobal\nExample\nTo change the value of a global variable inside a function, refer to the \n  variable by using the global keyword:\nglobal\nVideo: Python Global Variables",
    "scraped_at": "2025-08-29T13:27:19.412393"
  },
  {
    "tutorial": "Java",
    "title": "Introduction to Java",
    "url": "https://www.w3schools.com/java/java_intro.asp",
    "content": "Java Introduction\nWhat is Java?\nJava is a popular programming language, created in 1995.\nIt is owned by Oracle, and more than 3 billion devices run Java.\nIt is used for:\nMobile applications (specially Android apps)\nDesktop applications\nWeb applications\nWeb servers and application servers\nGames\nDatabase connection\nAnd much, much more!\nWhy Use Java?\nJava works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.)\nIt is one of the most popular programming languages in the world\nIt has a large demand in the current job market\nIt is easy to learn and simple to use\nIt is open-source and free\nIt is secure, fast and powerful\nIt has huge community support (tens of millions of developers)\nJava is an object oriented language which gives a clear structure to programs and allows code to be reused, lowering development costs\nAs Java is close to C++ and C# , it makes it easy for programmers to switch to Java or vice versa\nGet Started\nWhen you are finished with this tutorial, you will be able to write basic Java programs and create real-life examples.\nIt is not necessary to have any prior programming experience.\nVideo: Java Introduction",
    "scraped_at": "2025-08-29T13:27:22.914867"
  },
  {
    "tutorial": "JavaScript",
    "title": "JavaScript Tutorial",
    "url": "https://www.w3schools.com/js/default.asp",
    "content": "JavaScript Tutorial\nLearn JavaScript\nJavaScript is the programming language of the Web.\nJavaScript is easy to learn.\nThis tutorial covers everything from basic JavaScript up to the latest 2025 version.\nExamples in Each Chapter\nWith our \"Try it Yourself\" editor, you can edit the source code and view \nthe result.\nExample\nMy First JavaScript\nTry it Yourself »\nUse the Menu\nWe recommend reading this tutorial, in the sequence listed in the menu.\nIf you have a large screen, the menu will always be present on the left.\nIf you have a small screen, open the menu by clicking the top menu sign ☰ .\nLearn by Examples\nExamples are better than 1000 words. Examples are often easier to understand \nthan text explanations.\nThis tutorial supplements all explanations with clarifying \"Try it Yourself\" examples.\nIf you try all the examples, you will learn a lot about JavaScript, in a very short time!\nWhy Study JavaScript?\nJavaScript is one of the 3 languages all web developers must learn:\n1. HTML to define the content of web pages\n2. CSS to specify the layout of web pages\n3. JavaScript to program the behavior of web pages\nLearning Speed\nIn this tutorial, the learning speed is your choice.\nEverything is up to you.\nIf you are struggling, take a break, or re-read the material.\nAlways make sure you understand all the \"Try-it-Yourself\" \nexamples.\nThe only way to become a clever programmer is to:\nPractice coding! Practice coding! Practice coding!\nCommonly Asked Questions\nHow do I get JavaScript?\nWhere can I download JavaScript?\nIs JavaScript Free?\nYou don't have to get or download JavaScript.\nJavaScript is already running in your browser on your computer,\non your tablet, and on your smart-phone.\nJavaScript is free to use for everyone.\nJavaScript Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all JavaScript Exercises\nJavaScript Quiz Test\nTest your JavaScript skills at W3Schools!\nStart JavaScript Quiz!\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nJavaScript References\nW3Schools maintains a complete JavaScript reference, including all HTML and browser objects.\nThe reference contains examples for all properties, methods and events, and \nis continuously updated according to the latest web standards.\nKickstart your career\nGet certified by completing the course",
    "scraped_at": "2025-08-29T13:27:24.695570"
  },
  {
    "tutorial": "JavaScript",
    "title": "JavaScript Introduction",
    "url": "https://www.w3schools.com/js/js_intro.asp",
    "content": "JavaScript Introduction\nWhat is JavaScript?\nJavaScript is the programming language of the web.\nIt can update and change both HTML and CSS.\nIt can calculate, manipulate and validate data.\nWhy Study JavaScript?\nJavaScript is one of the 3 languages all web developers \nmust\nlearn:\n1. HTML to define the content of web pages\n2. CSS to specify the layout of web pages\n3. JavaScript to program the behavior of web pages\nJavaScript Can Change HTML Content\nOne of many JavaScript HTML methods is getElementById() .\ngetElementById()\nThe example below \"finds\" an HTML element (with id=\"demo\"), \nand changes the element content (innerHTML) to \"Hello JavaScript\":\nExample\nJavaScript accepts both double and single quotes:\nExample\nJavaScript Can Change HTML Attribute Values\nIn this example JavaScript changes the value of the src (source) attribute of an <img> tag:\nsrc\n<img>\nThe Light Bulb\nTry it Yourself »\nJavaScript Can Change HTML Styles (CSS)\nChanging the style of an HTML element, is a variant of changing an HTML \nattribute:\nExample\nJavaScript Can Hide HTML Elements\nHiding HTML elements can be done by changing the display style:\ndisplay\nExample\nJavaScript Can Show HTML Elements\nShowing hidden HTML elements can also be done by changing the display style:\ndisplay\nExample\nDid You Know?\nJavaScript and Java are completely different languages, both in concept \nand design.\nJavaScript was invented by Brendan Eich in 1995, and became an ECMA standard  \nin 1997.\nECMA-262 is the official name of the standard. ECMAScript is the official name of the language.\nVideo: JavaScript Introduction",
    "scraped_at": "2025-08-29T13:27:27.284496"
  },
  {
    "tutorial": "JavaScript",
    "title": "JavaScript Where To",
    "url": "https://www.w3schools.com/js/js_whereto.asp",
    "content": "JavaScript Where To\nThe <script> Tag\nIn HTML, JavaScript code is inserted between <script> and </script> tags.\n<script>\n</script>\nExample\nTry it Yourself »\nOld JavaScript examples may use a type attribute: <script type=\"text/javascript\">. The type attribute is not required. JavaScript is the default scripting language in HTML.\nJavaScript Functions and Events\nA JavaScript function is a block of JavaScript code, that can be executed when \"called\" for.\nfunction\nFor example, a function can be called when an event occurs, like when the user clicks a button.\nYou will learn much more about functions and events in later chapters.\nJavaScript in <head> or <body>\nYou can place any number of scripts in an HTML document.\nScripts can be placed in the <body> , or in the <head> section of an HTML page, or in both.\n<body>\n<head>\nJavaScript in <head>\nIn this example, a JavaScript function is placed in the <head> section \nof an HTML page.\nfunction\n<head>\nThe function is invoked (called) when a button is clicked:\nExample\n<h2>Demo JavaScript in Head</h2> <p id=\"demo\">A Paragraph</p> <button type=\"button\" onclick=\"myFunction()\">Try \nit</button>\n</body> </html>\nJavaScript in <body>\nIn this example, a JavaScript function is placed in the <body> section of an HTML page.\nfunction\n<body>\nThe function is invoked (called) when a button is clicked:\nExample\nPlacing scripts at the bottom of the <body> element improves the display \nspeed, because script interpretation slows down the display.\nExternal JavaScript\nScripts can also be placed in external files:\nExternal file: myScript.js\nExternal scripts are practical when the same code is used in many different web pages.\nJavaScript files have the file extension .js .\nTo use an external script, put the name of the script file in the src (source) attribute of \na <script> tag:\nsrc\n<script>\nExample\nYou can place an external script reference in <head> or <body> as you like.\n<head>\n<body>\nThe script will behave as if it was located exactly where the <script> tag is located.\n<script>\nExternal scripts cannot contain <script> tags.\n<script>\nExternal JavaScript Advantages\nPlacing scripts in external files has some advantages:\nIt separates HTML and code\nIt makes HTML and JavaScript easier to read and maintain\nCached JavaScript files can speed up page loads\nTo add several script files to one page  - use several script tags:\nExample\nExternal References\nAn external script can be referenced in 3 different ways:\nWith a full URL (a full web address)\nWith a file path (like /js/)\nWithout any path\nThis example uses a full URL to link to myScript.js:\nExample\nTry it Yourself »\nThis example uses a file path to link to myScript.js:\nExample\nTry it Yourself »\nThis example uses no path to link to myScript.js:\nExample\nTry it Yourself »\nYou can read more about file paths in the chapter HTML \nFile Paths .\nVideo: JavaScript Where to?",
    "scraped_at": "2025-08-29T13:27:30.165059"
  },
  {
    "tutorial": "JavaScript",
    "title": "JavaScript Output",
    "url": "https://www.w3schools.com/js/js_output.asp",
    "content": "JavaScript Output\nJavaScript Display Possibilities\nJavaScript can \"display\" data in different ways:\nWriting into an HTML element, using innerHTML or innerText .\ninnerHTML\ninnerText\nWriting into the HTML output using document.write() .\ndocument.write()\nWriting into an alert box, using window.alert() .\nwindow.alert()\nWriting into the browser console, using console.log() .\nconsole.log()\nUsing innerHTML\nTo access an HTML element, you can use the document.getElementById(id) method.\ndocument.getElementById(id)\nUse the id attribute to identify the HTML element.\nid\nThen use the innerHTML property to change the HTML content\nof the HTML element:\ninnerHTML\nExample\nNote\nChanging the innerHTML property of an HTML element\nis the most common way to display data in HTML.\nUsing innerText\nTo access an HTML element, use the document.getElementById(id) method.\ndocument.getElementById(id)\nThen use the innerText property to change the inner text\nof the HTML element:\ninnerText\nExample\nNote\nUse innerHTML when you want to change an HTML element.\nUse innerText when you only want to change the plain text.\nUsing document.write()\nFor testing purposes, it is convenient to use document.write() :\ndocument.write()\nExample\nUsing document.write() after an HTML document is loaded, will delete all existing HTML :\nExample\nThe document.write() method should only be used for testing.\nUsing window.alert()\nYou can use an alert box to display data:\nExample\nYou can skip the window keyword.\nwindow\nIn JavaScript, the window object is the global scope object. This means that variables, properties, and methods by default belong to the window object.\nThis also means that specifying the window keyword is optional:\nwindow\nExample\nUsing console.log()\nFor debugging purposes, you can call the console.log() method\nin the browser to display data.\nconsole.log()\nYou will learn more about debugging in a later chapter.\nExample\nJavaScript Print\nJavaScript does not have any print object or print methods.\nYou cannot access output devices from JavaScript.\nThe only exception is that you can call the window.print() method in\nthe browser to print the content of the current window.\nwindow.print()\nExample\nVideo: JavaScript Output",
    "scraped_at": "2025-08-29T13:27:33.383177"
  },
  {
    "tutorial": "JavaScript",
    "title": "JavaScript Statements",
    "url": "https://www.w3schools.com/js/js_statements.asp",
    "content": "JavaScript Statements\nStatements\nExample\nJavaScript Programs\nA computer program is a list of \"instructions\" to be \n\"executed\" by a computer.\nIn a programming language, these programming instructions are called statements .\nA JavaScript program is a list of programming statements .\nIn HTML, JavaScript programs are executed by the web browser.\nJavaScript Statements\nJavaScript statements are composed of:\nValues, Operators, Expressions, Keywords, \nand Comments.\nThis statement tells the browser to write \"Hello Dolly.\" \ninside an HTML element with id=\"demo\":\nExample\nMost JavaScript \nprograms contain many JavaScript statements.\nThe statements are executed, one by one, in the \nsame order as they are written.\nJavaScript programs (and JavaScript statements) are often called JavaScript code.\nSemicolons ;\nSemicolons separate JavaScript statements.\nAdd a semicolon at the end of each executable statement:\nExamples\nWhen separated by semicolons, multiple statements on one line are allowed:\nOn the web, you might see examples without semicolons. Ending statements with semicolon is not required, but highly recommended.\nJavaScript White Space\nJavaScript ignores multiple spaces. You can add white space to your script to make it more readable.\nThe following lines are equivalent:\nA good practice is to put spaces around operators ( = + - * / ):\nJavaScript Line Length and Line Breaks\nFor best readability, programmers often like to avoid code lines longer than 80 \ncharacters.\nIf a JavaScript statement does not fit on one line, the best place to break \nit is after an operator:\nExample\nJavaScript Code Blocks\nJavaScript statements can be grouped together in code blocks, inside curly \nbrackets {...}.\nThe purpose of code blocks is to define statements to be executed together.\nOne place you will find statements grouped together in blocks, is in \nJavaScript functions:\nExample\nIn this tutorial we use 2 spaces of indentation for code blocks. You will learn more about functions later in this tutorial.\nJavaScript Keywords\nJavaScript statements often start with a keyword to identify the JavaScript action to be performed.\nOur Reserved Words Reference lists all JavaScript keywords.\nHere is a list of some of the keywords you will learn about in \nthis tutorial:\nJavaScript keywords are reserved words. Reserved words cannot be used as names for variables.\nVideo: JavaScript Statements",
    "scraped_at": "2025-08-29T13:27:37.541634"
  },
  {
    "tutorial": "JavaScript",
    "title": "JavaScript Syntax",
    "url": "https://www.w3schools.com/js/js_syntax.asp",
    "content": "JavaScript Syntax\nJavaScript syntax is the set of rules, how \nJavaScript programs are constructed:\nJavaScript Values\nThe JavaScript syntax defines two types of values:\nFixed values\nVariable values\nFixed values are called Literals .\nVariable values are called Variables .\nJavaScript Literals\nThe two most important syntax rules for fixed values are:\n1. Numbers are written with or \nwithout decimals:\n2. Strings are text, written within double or single quotes:\nJavaScript Variables\nIn a programming language, variables are used to store data values.\nJavaScript uses the keywords var , let and const to declare variables.\nvar\nlet\nconst\nAn equal sign is used to assign values to variables.\nIn this example, x is defined as a variable. Then, x is \nassigned (given) the value \n6:\nJavaScript Operators\nJavaScript uses arithmetic operators ( + - * / ) to compute values:\n+\n-\n*\n/\nJavaScript uses an assignment operator ( = ) to assign values to variables:\n=\nJavaScript Expressions\nAn expression is a combination of values, variables, and operators, \nwhich computes to a value.\nThe computation is called an evaluation.\nFor example, 5 * 10 evaluates to 50:\nExpressions can also contain variable values:\nThe values can be of various types, such as numbers and strings.\nFor example, \"John\" + \" \" + \"Doe\", evaluates to \"John Doe\":\nJavaScript Keywords\nJavaScript keywords are used to \nidentify actions to be performed.\nThe let keyword tells the browser to create variables:\nlet\nThe var keyword also tells the browser to create variables:\nvar\nIn these examples, using var or let will produce the same result.\nvar\nlet\nYou will learn more about var and let later in this tutorial.\nvar\nlet\nJavaScript Comments\nNot all JavaScript statements are \"executed\".\nCode after double slashes // or between /* and */ is treated as a comment .\n//\n/*\n*/\nComments are ignored, and will not be \nexecuted:\nYou will learn more about comments in a later chapter.\nJavaScript Identifiers / Names\nIdentifiers are JavaScript names.\nIdentifiers are used to name variables and keywords, and functions.\nThe rules for legal names are the same in most programming languages.\nA JavaScript name must begin with:\nA letter (A-Z or a-z)\nA dollar sign ($)\nOr an underscore (_)\nSubsequent characters may be letters, digits, underscores, or dollar signs.\nNote\nNumbers are not allowed as the first character in names.\nThis way JavaScript can easily distinguish identifiers from numbers.\nJavaScript is Case Sensitive\nAll JavaScript identifiers are case sensitive .\nThe variables lastName and lastname , \nare two different variables:\nlastName\nlastname\nJavaScript does not interpret LET or Let as the keyword let .\nJavaScript and Camel Case\nHistorically, programmers have used different ways of joining multiple words into one variable name:\nHyphens:\nfirst-name, last-name, master-card, inter-city.\nHyphens are not allowed in JavaScript. They are reserved for subtractions.\nUnderscore:\nfirst_name, last_name, master_card, inter_city.\nUpper Camel Case (Pascal Case):\nFirstName, LastName, MasterCard, InterCity.\nLower Camel Case: JavaScript programmers tend to use camel case that starts with a lowercase letter: firstName, lastName, masterCard, interCity. JavaScript Character Set JavaScript uses the Unicode character set. Unicode covers (almost) all the characters, punctuations, and symbols in the world. For a closer look, please study our Complete Unicode Reference . Video: JavaScript Syntax ❮ Previous Next ❯\nLower Camel Case:\nJavaScript programmers tend to use camel case that starts with a lowercase letter:\nfirstName, lastName, masterCard, interCity.\nJavaScript Character Set\nJavaScript uses the Unicode character set.\nUnicode covers (almost) all the characters, punctuations, and symbols in the world.\nFor a closer look, please study our Complete Unicode Reference .\nVideo: JavaScript Syntax",
    "scraped_at": "2025-08-29T13:27:41.535643"
  },
  {
    "tutorial": "JavaScript",
    "title": "JavaScript Comments",
    "url": "https://www.w3schools.com/js/js_comments.asp",
    "content": "JavaScript Comments\nJavaScript comments can be used to explain JavaScript code, and \nto make it more readable.\nJavaScript comments can also be used to prevent execution, when \ntesting alternative code.\nSingle Line Comments\nSingle line comments start with // .\n//\nAny text between // and the end of the line will be ignored by JavaScript \n(will not be executed).\n//\nThis example uses a single-line comment before each code line:\nExample\nThis example uses a single line comment at the end of each line \nto explain the code:\nExample\nMulti-line Comments\nMulti-line comments start with /* and end with */ .\n/*\n*/\nAny text between /* and */ will be ignored by JavaScript.\n/*\n*/\nThis example uses a multi-line comment (a comment block) to explain the code:\nExample\nIt is most common to use single line comments. Block comments are often \nused for formal documentation.\nUsing Comments to Prevent Execution\nUsing comments to prevent execution of code is suitable for \ncode testing.\nAdding // in front of a code line changes the code lines from an executable line to \na comment.\n//\nThis example uses // to prevent execution of one of the code lines:\nExample\nThis example uses a comment block to prevent execution of \nmultiple lines:\nExample\nVideo: JavaScript Comments",
    "scraped_at": "2025-08-29T13:27:44.851496"
  },
  {
    "tutorial": "JavaScript",
    "title": "JavaScript Variables",
    "url": "https://www.w3schools.com/js/js_variables.asp",
    "content": "JavaScript Variables\nVariables are Containers for Storing Data\nJavaScript Variables can be declared in 4 ways:\nAutomatically\nUsing var\nvar\nUsing let\nlet\nUsing const\nconst\nIn this first example, x , y , and z are undeclared variables.\nx\ny\nz\nThey are automatically declared when first used:\nExample\nNote\nIt is considered good programming practice to always declare variables before use.\nFrom the examples you can guess:\nx stores the value 5\ny stores the value 6\nz stores the value 11\nExample using var\nNote\nThe var keyword was used in all JavaScript code from 1995 to 2015.\nvar\nThe let and const keywords were added to JavaScript in 2015.\nlet\nconst\nThe var keyword should only be used in code written for older browsers.\nvar\nExample using let\nExample using const\nMixed Example\nThe two variables price1 and price2 are declared with the const keyword.\nprice1\nprice2\nconst\nThese are constant values and cannot be changed.\nThe variable total is declared with the let keyword.\ntotal\nlet\nThe value total can be changed.\ntotal\nWhen to Use var, let, or const?\n1. Always declare variables\n2. Always use const if the value should not be changed\nconst\n3. Always use const if the type should not be changed (Arrays and Objects)\nconst\n4. Only use let if you can't use const\nlet\nconst\n5. Only use var if you MUST support old browsers.\nvar\nJust Like Algebra\nJust like in algebra, variables hold values:\nJust like in algebra, variables are used in expressions:\nFrom the example above, you can guess that the total is calculated to be 11.\nNote\nVariables are containers for storing values.\nJavaScript Identifiers\nAll JavaScript variables must be identified with unique names .\nThese unique names are called identifiers .\nIdentifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).\nThe general rules for constructing names for variables (unique identifiers) are:\nNames can contain letters, digits, underscores, and dollar signs.\nNames must begin with a letter.\nNames can also begin with $ and _ (but we will not use it in this tutorial).\nNames are case sensitive (y and Y are different variables).\nReserved words (like JavaScript keywords) cannot be used as names.\nNote\nJavaScript identifiers are case-sensitive.\nThe Assignment Operator\nIn JavaScript, the equal sign ( = ) is an \"assignment\" operator, not an \n\"equal to\" operator.\n=\nThis is different from algebra. The following does not make sense in \nalgebra:\nIn JavaScript, however, it makes perfect sense: it assigns the value of x + 5 to \nx.\n(It calculates the value of x + 5 and puts the result into x. The value of x \nis incremented by 5.)\nNote\nThe \"equal to\" operator is written like == in JavaScript.\n==\nJavaScript Data Types\nJavaScript variables can hold numbers like 100 and text values like \"John \nDoe\".\nIn programming, text values are called text strings.\nJavaScript can handle many types of data, but for now, just think of numbers and strings.\nStrings are written inside double or single quotes. Numbers are written \nwithout quotes.\nIf you put a number in quotes, it will be treated as a text string.\nExample\nDeclaring a JavaScript Variable\nCreating a variable in JavaScript is called \"declaring\" a variable.\nYou declare a JavaScript variable with the var or the let keyword:\nvar\nlet\nAfter the declaration, the variable has no value (technically it is undefined ).\nundefined\nTo assign a value to the variable, use the equal sign:\nYou can also assign a value to the variable when you declare it:\nIn the example below, we create a variable called carName and assign the value \n\"Volvo\" to it.\ncarName\nThen we \"output\" the value inside an HTML paragraph with id=\"demo\":\nExample\nNote\nIt's a good programming practice to declare all variables at the beginning of a script.\nOne Statement, Many Variables\nYou can declare many variables in one statement.\nStart the statement \nwith let and separate the variables by comma :\nlet\nExample\nA declaration can span multiple lines:\nExample\nValue = undefined\nIn computer programs, variables are often declared without a value. The value \ncan be something that has to be calculated, or something that will be provided \nlater, like user input.\nA variable declared without a value will have the value undefined .\nundefined\nThe variable carName will have the value undefined after the execution of this statement:\nundefined\nExample\nRe-Declaring JavaScript Variables\nIf you re-declare a JavaScript variable declared with var , it will not lose its value.\nvar\nThe variable carName will still have the value \"Volvo\" after the execution of these statements:\ncarName\nExample\nNote\nYou cannot re-declare a variable declared with let or const .\nlet\nconst\nThis will not work:\nJavaScript Arithmetic\nAs with algebra, you can do arithmetic with JavaScript variables, using \noperators like = and + :\n=\n+\nExample\nYou can also add strings, but strings will be concatenated:\nExample\nAlso try this:\nExample\nNote\nIf you put a number in quotes, the rest of the numbers will be treated as strings, and concatenated.\nNow try this:\nExample\nJavaScript Dollar Sign $\nSince JavaScript treats a dollar sign as a letter, identifiers containing $ are valid variable names:\nExample\nUsing the dollar sign is not very common in JavaScript,\nbut professional programmers often use it \nas an alias for the main function in a JavaScript library.\nIn the JavaScript library jQuery, for instance, the main function $ is used to select HTML elements.\nIn jQuery $(\"p\"); means \"select all p elements\".\n$\n$(\"p\");\nJavaScript Underscore (_)\nSince JavaScript treats underscore as a letter, identifiers containing _ are valid variable names: Example let _lastName = \"Johnson\"; let _x = 2; let _100 = 5; Try it Yourself » Using the underscore is not very common in JavaScript,\n\nbut a convention among professional programmers is to use it as an alias for\n\"private (hidden)\" variables. Video: JavaScript Variables ❮ Previous Next ❯\nSince JavaScript treats underscore as a letter, identifiers containing _ are valid variable names:\nExample\nUsing the underscore is not very common in JavaScript,\n\nbut a convention among professional programmers is to use it as an alias for\n\"private (hidden)\" variables.\nVideo: JavaScript Variables",
    "scraped_at": "2025-08-29T13:27:48.801568"
  },
  {
    "tutorial": "JavaScript",
    "title": "JavaScript Let",
    "url": "https://www.w3schools.com/js/js_let.asp",
    "content": "JavaScript Let\nThe let keyword was introduced in ES6 (2015)\nlet\nVariables declared with let have Block Scope\nlet\nVariables declared with let must be Declared before use\nlet\nVariables declared with let cannot be Redeclared in the same scope\nlet\nBlock Scope\nBefore ES6 (2015), JavaScript did not have Block Scope .\nJavaScript had Global Scope and Function Scope .\nES6 introduced the two new JavaScript keywords: let and const .\nlet\nconst\nThese two keywords provided Block Scope in JavaScript:\nExample\nVariables declared inside a { } block cannot be accessed \nfrom outside the block:\nGlobal Scope\nVariables declared with the var always have Global Scope .\nvar\nVariables declared with the var keyword can NOT have block scope:\nvar\nExample\nVariables declared with var inside a { } block can be accessed from \noutside the block:\nvar\nCannot be Redeclared\nVariables defined with let can not be redeclared.\nlet\nYou can not accidentally redeclare a variable declared with let .\nlet\nWith let you can not do this:\nlet\nVariables defined with var can be redeclared.\nvar\nWith var you can do this:\nvar\nRedeclaring Variables\nRedeclaring a variable using the var keyword can impose problems.\nvar\nRedeclaring a variable inside a block will also redeclare the variable \noutside the block:\nExample\nRedeclaring a variable using the let keyword can solve this problem.\nlet\nRedeclaring a variable inside a block will not redeclare the variable outside \nthe block:\nExample\nDifference Between var, let and const\nWhat is Good?\nlet and const have block scope .\nlet\nconst\nlet and const can not be redeclared .\nlet\nconst\nlet and const must be declared before use.\nlet\nconst\nlet and const does not bind to this .\nlet\nconst\nthis\nlet and const are not hoisted .\nlet\nconst\nWhat is Not Good?\nvar does not have to be declared.\nvar\nvar is hoisted.\nvar\nvar binds to this.\nvar\nBrowser Support\nThe let and const keywords are\nnot supported in Internet Explorer 11 or earlier.\nlet\nconst\nThe following table defines the first browser versions with full support:\nRedeclaring\nRedeclaring a JavaScript variable with var is allowed \nanywhere in a program:\nvar\nExample\nWith let , redeclaring a variable in the same block is NOT allowed:\nlet\nExample\nRedeclaring a variable with let , in another block, IS allowed:\nlet\nExample\nLet Hoisting\nVariables defined with var are hoisted to the top \nand can be initialized at any time. Meaning: You can use the variable before it is declared: Example This is OK: carName = \"Volvo\"; var carName; Try it Yourself » If you want to learn more about hoisting, study the chapter JavaScript Hoisting . Variables defined with let are also hoisted to the top \nof the block, but not initialized. Meaning: Using a let variable before it is declared will result in a ReferenceError : Example carName = \"Saab\"; let carName = \"Volvo\"; Try it Yourself » Video: JavaScript let ❮ Previous Next ❯\nvar\nMeaning: You can use the variable before it is declared:\nExample\nThis is OK:\nIf you want to learn more about hoisting, study the chapter JavaScript Hoisting . Variables defined with let are also hoisted to the top \nof the block, but not initialized. Meaning: Using a let variable before it is declared will result in a ReferenceError : Example carName = \"Saab\"; let carName = \"Volvo\"; Try it Yourself » Video: JavaScript let ❮ Previous Next ❯\nVariables defined with let are also hoisted to the top \nof the block, but not initialized.\nlet\nMeaning: Using a let variable before it is declared will result in a ReferenceError :\nlet\nReferenceError\nExample\nVideo: JavaScript let",
    "scraped_at": "2025-08-29T13:27:51.998745"
  },
  {
    "tutorial": "JavaScript",
    "title": "JavaScript const",
    "url": "https://www.w3schools.com/js/js_const.asp",
    "content": "JavaScript Const\nThe const keyword was introduced in ES6 (2015)\nconst\nVariables defined with const cannot be Redeclared\nconst\nVariables defined with const cannot be Reassigned\nconst\nVariables defined with const have Block Scope\nconst\nCannot be Reassigned\nA variable defined with the const keyword cannot be reassigned:\nconst\nExample\nMust be Assigned\nJavaScript const variables must be assigned a value when they are declared:\nconst\nCorrect\nIncorrect\nWhen to use JavaScript const?\nAlways declare a variable with const when you know that\nthe value should not be changed.\nconst\nUse const when you declare:\nconst\nA new Array\nA new Object\nA new Function\nA new RegExp\nConstant Objects and Arrays\nThe keyword const is a little misleading.\nconst\nIt does not define a constant value. It defines a constant reference to a value.\nBecause of this you can NOT:\nReassign a constant value\nReassign a constant array\nReassign a constant object\nBut you CAN:\nChange the elements of constant array\nChange the properties of constant object\nConstant Arrays\nYou can change the elements of a constant array:\nExample\nBut you can NOT reassign the array:\nExample\nConstant Objects\nYou can change the properties of a constant object:\nExample\nBut you can NOT reassign the object:\nExample\nDifference Between var, let and const\nWhat is Good?\nlet and const have block scope .\nlet\nconst\nlet and const can not be redeclared .\nlet\nconst\nlet and const must be declared before use.\nlet\nconst\nlet and const does not bind to this .\nlet\nconst\nthis\nlet and const are not hoisted .\nlet\nconst\nWhat is Not Good?\nvar does not have to be declared.\nvar\nvar is hoisted.\nvar\nvar binds to this.\nvar\nBrowser Support\nThe let and const keywords are\nnot supported in Internet Explorer 11 or earlier.\nlet\nconst\nThe following table defines the first browser versions with full support:\nBlock Scope\nDeclaring a variable with const is similar to let when it comes to Block Scope .\nconst\nlet\nThe x declared in the block, in this example, is not the same as the x declared outside the block:\nExample\nYou can learn more about block scope in the chapter JavaScript Scope .\nRedeclaring\nRedeclaring a JavaScript var variable is allowed \nanywhere in a program:\nvar\nExample\nRedeclaring an existing var or let variable to const , in the same scope, is not allowed:\nvar\nlet\nconst\nExample\nReassigning an existing const variable, in the same scope, is not allowed:\nconst\nExample\nRedeclaring a variable with const , in another scope, or in another block, is allowed:\nconst\nExample\nHoisting\nVariables defined with var are hoisted to the top \nand can be initialized at any time.\nvar\nMeaning: You can use the variable before it is declared:\nExample\nThis is OK:\nIf you want to learn more about hoisting, study the chapter JavaScript Hoisting . Variables defined with const are also hoisted to the top,\nbut not initialized. Meaning: Using a const variable before it is declared will result in a ReferenceError : Example alert (carName); const carName = \"Volvo\"; Try it Yourself » ❮ Previous Next ❯\nVariables defined with const are also hoisted to the top,\nbut not initialized.\nconst\nMeaning: Using a const variable before it is declared will result in a ReferenceError :\nconst\nReferenceError\nExample",
    "scraped_at": "2025-08-29T13:27:55.021765"
  },
  {
    "tutorial": "C",
    "title": "Introduction to C",
    "url": "https://www.w3schools.com/c/c_intro.php",
    "content": "C Introduction\nWhat is C?\nC is a general-purpose programming language created by Dennis Ritchie at the Bell Laboratories in 1972.\nIt is a very popular language, despite being old. The main reason for its popularity is because it is a fundamental language in the field of computer science.\nC is strongly associated with UNIX, as it was developed to write the UNIX operating system.\nWhy Learn C?\nIt is one of the most popular programming languages in the world\nIf you know C, you will have no problem learning other popular programming languages such as Java, Python, C++, C#, etc, as the syntax is similar\nIf you know C, you will understand how computer memory works\nC is very fast, compared to other programming languages, like Java and Python\nC is very versatile; it can be used in both applications and technologies\nDifference between C and C++\nC++ was developed as an extension of C, and both languages have almost the same syntax\nThe main difference between C and C++ is that C++ supports classes and objects, while C does not.\nGet Started\nThis tutorial will teach you the basics of C.\nWhen you are finished with this tutorial, you will be able to write C programs and create real-life examples.\nIt is not necessary to have any prior programming experience.",
    "scraped_at": "2025-08-29T13:27:58.459077"
  },
  {
    "tutorial": "C",
    "title": "Get Started with C",
    "url": "https://www.w3schools.com/c/c_getstarted.php",
    "content": "C Get Started\nGet Started With C\nAt W3Schools, you can try C without installing anything.\nOur Online C Editor runs directly in your browser, and shows both the code and the result:\nCode:\nResult:\nHello World!\nThis editor will be used in the entire tutorial to demonstrate the different aspects of C.\nInstall C\nIf you want to run C on your own computer, you need two things:\nA text editor, like Notepad, to write C code\nA compiler, like GCC, to translate the C code into a language that \nthe computer will understand\nThere are many text editors and compilers to choose from. In the next steps, we will show you how to use an IDE that includes both.\nInstall IDE\nAn IDE (Integrated Development Environment) is used to edit AND compile the code.\nPopular IDE's include Code::Blocks, Eclipse, and Visual Studio. These are all \nfree, and they can be used to both edit and debug C code.\nNote: Web-based IDE's can work as well, but functionality is limited.\nWe will use Code::Blocks in our tutorial, which we believe is a good place to start.\nYou can find the latest version of Codeblocks at http://www.codeblocks.org/ . \nDownload the mingw-setup.exe file, which will install the text editor with \na compiler.\nmingw-setup.exe\nC Quickstart\nLet's create our first C file.\nOpen Codeblocks and go to File > New > Empty File .\nWrite the following C code and save the file as myfirstprogram.c ( File > Save File as ):\nmyfirstprogram.c\nDon't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, focus on how to run the code.\nIn Codeblocks, it should look like this:\nThen, go to Build > Build and Run to run (execute) the program. The result will look something to this:\nHello World! Process returned 0 (0x0) execution time : 0.011 s Press any \n  key to continue.\nCongratulations ! You have now written and executed your first C program.",
    "scraped_at": "2025-08-29T13:28:02.607555"
  },
  {
    "tutorial": "C",
    "title": "C Syntax",
    "url": "https://www.w3schools.com/c/c_syntax.php",
    "content": "C Syntax\nSyntax\nYou have already seen the following code a couple of times in the first \nchapters. Let's break it down to understand it better:\nExample\nExample explained\nLine 1: #include <stdio.h> is a header file library that lets us work with input and output \nfunctions, such as printf() (used in line 4). Header files add functionality to C programs.\n#include <stdio.h>\nprintf()\nDon't worry if you don't understand how #include <stdio.h> works. Just think of it as something that (almost) always appears in your program.\n#include <stdio.h>\nLine 2: A blank line. C ignores white space. But we use it \nto make the code more readable.\nLine 3: Another thing that always appear in a C program is main() . This is called a function . Any code inside its curly brackets {} will be executed.\nmain()\n{}\nLine 4: printf() is a function used to output/print text to the screen. In our example, it will output \"Hello World!\".\nprintf()\nNote that: Every C statement ends with a semicolon ;\n;\nNote: The body of int main() could also been written as: int main(){printf(\"Hello World!\");return 0;}\nint main()\nint main(){printf(\"Hello World!\");return 0;}\nRemember: The compiler ignores white spaces. However, multiple lines makes the code more readable.\nLine 5: return 0 ends the main() function.\nreturn 0\nmain()\nLine 6: Do not forget to add the closing curly bracket } to actually end the \nmain function.\n}",
    "scraped_at": "2025-08-29T13:28:06.414156"
  },
  {
    "tutorial": "C",
    "title": "C Statements",
    "url": "https://www.w3schools.com/c/c_statements.php",
    "content": "C Statements\nStatements\nA computer program is a list of \"instructions\" to be \"executed\" by a computer.\nIn a programming language, these programming instructions are called statements .\nThe following statement \"instructs\" the compiler to print the text \"Hello World\" \nto the screen:\nExample\nIt is important that you end the statement with a semicolon ;\n;\nIf you forget the semicolon ( ; ), an error will occur \nand the program will not run:\n;\nExample\nerror: expected ';' before 'return'\nMany Statements\nMost C programs contain many statements.\nThe statements are executed, one by one, in the same order as they are \nwritten:\nExample\nFrom the example above, we have three statements:\nprintf(\"Hello World!\");\nprintf(\"Hello World!\");\nprintf(\"Have \n  a good day!\");\nprintf(\"Have \n  a good day!\");\nreturn 0;\nreturn 0;\nThe first statement is executed first (print \"Hello World!\" to the screen). Then the second statement is executed (print \"Have a good day!\" to the screen). And at last, the third statement is executed (end the C program successfully).\nYou will learn more about statements while reading this tutorial. For now, just remember to always end them with a semicolon to avoid any errors.\nComing up: The next chapter will teach you how to control \n  the output and how to insert new lines to make it more readable.",
    "scraped_at": "2025-08-29T13:28:08.891455"
  },
  {
    "tutorial": "C",
    "title": "C Output (Print Text)",
    "url": "https://www.w3schools.com/c/c_output.php",
    "content": "C Output (Print Text)\nOutput (Print Text)\nTo output values or print text in C, you can use the printf() function:\nprintf()\nExample\nDouble Quotes\nWhen you are working with text, it must be wrapped inside double quotations marks \"\" .\n\"\"\nIf you forget the double quotes, an error occurs:\nExample\nMany printf Functions\nprintf\nYou can use as many printf() functions as you want. However , note that it does not insert a new line at the end of the output:\nprintf()\nExample",
    "scraped_at": "2025-08-29T13:28:12.299365"
  },
  {
    "tutorial": "C",
    "title": "C New Lines",
    "url": "https://www.w3schools.com/c/c_newline.php",
    "content": "C New Lines\nNew Lines\nTo insert a new line, you can use the \\n character:\n\\n\nExample\nYou can also output multiple lines with a single printf() function. \nHowever, this could make the code harder to read:\nprintf()\nExample\nTip: Two \\n characters after each other will create a blank line:\n\\n\nExample\n\\n\nThe newline character ( \\n ) is called an escape sequence , and \nit forces the cursor to change its position to the beginning of the next line on the screen. This results in a new line.\n\\n\nExamples of other valid escape sequences are:",
    "scraped_at": "2025-08-29T13:28:15.626773"
  },
  {
    "tutorial": "C",
    "title": "C Comments",
    "url": "https://www.w3schools.com/c/c_comments.php",
    "content": "C Comments\nComments in C\nComments can be used to explain code, and to make it more readable. It can also be used to \nprevent execution when testing alternative code.\nComments can be singled-lined or multi-lined .\nSingle-line Comments\nSingle-line comments start with two forward slashes ( // ).\n//\nAny text between // and the end of the line \nis ignored by the compiler (will not be executed).\n//\nThis example uses a single-line comment before a line of code:\nExample\nThis example uses a single-line comment at the end of a line of code:\nExample\nC Multi-line Comments\nMulti-line comments start with /* and ends with */ .\n/*\n*/\nAny text between /* and */ will be ignored by \nthe compiler:\n/*\n*/\nExample\nIt is up to you which you want to use. Normally, we use // for short comments, and /* */ for longer.\n//\n/* */\nGood to know: Before version C99 (released in 1999), you could only use multi-line comments in C.",
    "scraped_at": "2025-08-29T13:28:18.303889"
  },
  {
    "tutorial": "C",
    "title": "C Variables",
    "url": "https://www.w3schools.com/c/c_variables.php",
    "content": "C Variables\nVariables\nVariables are containers for storing data values, like numbers and \ncharacters.\nIn C, there are different types of variables (defined with different keywords), for example:\nint - stores integers (whole numbers), without decimals, such as 123 or -123\nint\n123\n-123\nfloat - stores floating point numbers, with decimals, such as 19.99 or -19.99\nfloat\n19.99\n-19.99\nchar - stores single characters, such as 'a' or 'B' . \n Characters are surrounded by single quotes\nchar\n'a'\n'B'\nDeclaring (Creating) Variables\nTo create a variable, specify the type and assign it a value :\nSyntax\nWhere type is one of C types (such as int ), and variableName is the name of the variable (such as x or myName ). The equal sign is used to assign a value to the variable.\nint\nSo, to create a variable that should store a number , look at the following example:\nExample\nCreate a variable called myNum of type int and assign the value 15 to it:\nint\nYou can also declare a variable without assigning the value, and assign the value later:\nExample\nOutput Variables\nYou learned from the output chapter that you can output values/print text with the printf() function:\nprintf()\nExample\nIn many other programming languages (like Python , Java , and C++ ), you would normally use a print function to display the value of a variable. However, this is not possible in C:\nExample\nTo output variables in C, you must get familiar with something called \" format specifiers \", which you will learn about in the next chapter.",
    "scraped_at": "2025-08-29T13:28:21.936370"
  },
  {
    "tutorial": "C",
    "title": "C Format Specifiers",
    "url": "https://www.w3schools.com/c/c_variables_format.php",
    "content": "C Format Specifiers\nFormat Specifiers\nFormat specifiers are used together with the printf() function to tell the compiler what type of data the variable is storing. It is \nbasically a placeholder for the variable value.\nprintf()\nA format specifier starts \nwith a percentage sign % , followed by a character.\n%\nFor example, to output the value of an int variable, \nuse the format \nspecifier %d surrounded by double quotes ( \"\" ), \ninside the printf() function:\nint\n%d\n\"\"\nprintf()\nExample\nTo print other types, use %c for char and %f for float :\n%c\nchar\n%f\nfloat\nExample\nTo combine both text and a variable, separate them with a comma inside the printf() function:\nprintf()\nExample\nTo print different types in a single printf() function, you can use the \nfollowing:\nprintf()\nExample\nYou will learn more about Data Types in a later chapter .\nPrint Values Without Variables\nYou can also just print a value without storing it in a variable, as long as you use the correct format specifier:\nExample\nHowever , it is more sustainable to use variables as they are saved for later and can be re-used whenever.",
    "scraped_at": "2025-08-29T13:28:25.307389"
  },
  {
    "tutorial": "C",
    "title": "C Change Variable Values",
    "url": "https://www.w3schools.com/c/c_variables_change.php",
    "content": "C Variable Values\nChange Variable Values\nIf you assign a new value to an existing variable, it will overwrite the previous value:\nExample\nYou can also assign the value of one variable to another:\nExample\nOr copy values to empty variables:\nExample\nAdd Variables Together\nTo add a variable to another variable, you can use the + operator:\n+\nExample",
    "scraped_at": "2025-08-29T13:28:28.341443"
  },
  {
    "tutorial": "C++",
    "title": "C++ Tutorial",
    "url": "https://www.w3schools.com/cpp/default.asp",
    "content": "C++ Tutorial\nLearn C++\nC++ is a popular programming language.\nC++ is used to create computer programs, and is one of the most used language in game development.\nC++ was developed as an extension of C , and both languages have almost the same syntax.\nTip: Sign in to track your progress - it's free.\nExamples in Each Chapter\nOur \"Try it Yourself\" editor makes it easy to learn C++. You can edit C++ code and view the result in your browser.\nExample\nClick on the \"Run example\" button to see how it works.\nWe recommend reading this tutorial, in the sequence listed in the left menu.\nC++ is an object oriented language and some concepts may be new. Take breaks when needed, and go\nover the examples as many times as needed.\nC++ Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all C++ Exercises\nC++ Quiz\nLearn by taking a quiz! The quiz will give you a signal of how much you know, or do not know, about C++.\nStart C++ Quiz\nLearn by Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All C++ Examples\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nC++ Reference\nYou will also find references for different libraries, keywords and functions:\nC++ Keywords\nC++ <iostream> objects\nC++ <fstream> classes\nC++ <cmath> functions\nC++ <string> functions\nC++ <cstring> functions\nC++ <ctime> functions\nC++ <vector> functions\nC++ <algorithm> functions\nKickstart your career\nGet certified by completing the course",
    "scraped_at": "2025-08-29T13:28:31.922053"
  },
  {
    "tutorial": "C++",
    "title": "C++ Introduction",
    "url": "https://www.w3schools.com/cpp/cpp_intro.asp",
    "content": "C++ Introduction\nWhat is C++?\nC++ is a cross-platform language that can be used to create high-performance applications.\nC++ was developed by Bjarne Stroustrup, as an extension to the C language .\nC++ gives programmers a high level of control over system resources and memory.\nThe language was updated 5 major times in 2011, 2014, 2017, 2020, and 2023 to C++11, C++14, C++17, C++20, and C++23.\nWhy Use C++\nC++ is one of the world's most popular programming languages.\nC++ can be found in today's operating systems, Graphical User Interfaces, and embedded systems.\nC++ is an object-oriented programming language which gives a clear structure to programs and allows code to be reused, lowering development costs.\nC++ is portable and can be used to develop applications that can be adapted to multiple platforms.\nC++ is fun and easy to learn!\nAs C++ is close to C , C# and Java , it makes it easy for programmers to switch to C++ or vice versa.\nDifference between C and C++\nC++ was developed as an extension of C , and both languages have almost the same syntax.\nThe main difference between C and C++ is that C++ supports classes and objects, while C does not.\nGet Started\nWhen you are finished with this tutorial, you will be able to write C++ programs and create real-life examples.\nIt is not necessary to have any prior programming experience.",
    "scraped_at": "2025-08-29T13:28:35.401914"
  },
  {
    "tutorial": "C++",
    "title": "C++ Getting Started",
    "url": "https://www.w3schools.com/cpp/cpp_getstarted.asp",
    "content": "C++ Getting Started\nGet Started With C++\nAt W3Schools, you can try C++ without installing anything.\nOur Online C++ Editor runs directly in your browser, and shows both the code and the result:\nCode:\nResult:\nHello World!\nThis editor will be used in the entire tutorial to demonstrate the different aspects of C++.\nInstall C++\nIf you want to run C++ on your own computer, you need two things:\nA text editor, like Notepad, to write C++ code\nA compiler, like GCC, to translate the C++ code into a language that \nthe computer will understand\nThere are many text editors and compilers to choose from. In the next steps, we will show you how to use an IDE that includes both.\nInstall C++ IDE\nAn IDE (Integrated Development Environment) is used to edit AND compile the code.\nPopular IDE's include Code::Blocks, Eclipse, and Visual Studio.  These are all \nfree, and they can be used to both edit and debug C++ code.\nNote: Web-based IDE's can work as well, but functionality is limited.\nWe will use Code::Blocks in our tutorial, which we believe is a good place to start.\nYou can find the latest version of Codeblocks at http://www.codeblocks.org/ . \nDownload the mingw-setup.exe file, which will install the text editor with \na compiler.\nmingw-setup.exe\nC++ Quickstart\nLet's create our first C++ file.\nOpen Codeblocks and go to File > New > Empty File .\nWrite the following C++ code and save the file as myfirstprogram.cpp ( File > Save File as ):\nmyfirstprogram.cpp\nDon't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, focus on how to run the code.\nIn Codeblocks, it should look like this:\nThen, go to Build > Build and Run to run (execute) the program. The result will look something to this:\nHello World! Process returned 0 (0x0) execution time : 0.011 s Press any \n  key to continue.\nCongratulations ! You have now written and executed your first C++ program.",
    "scraped_at": "2025-08-29T13:28:38.209461"
  },
  {
    "tutorial": "C++",
    "title": "C++ Syntax",
    "url": "https://www.w3schools.com/cpp/cpp_syntax.asp",
    "content": "C++ Syntax\nC++ Syntax\nLet's break up the following code to understand it better:\nExample\nExample explained\nLine 1: #include <iostream> is a header file library that lets us work with input and output objects, such as cout (used in line 5). Header files add functionality to C++ programs.\n#include <iostream>\ncout\nLine 2: using namespace std means that we can use names for objects and variables from the \nstandard library.\nusing namespace std\nDon't worry if you don't understand how #include <iostream> and using namespace std works. Just think of it as something that (almost) always appears in your program.\n#include <iostream>\nusing namespace std\nLine 3: A blank line. C++ ignores white space. But we use it \nto make the code more readable.\nLine 4: Another thing that always appear in a C++ program is int main() . This is called a function . Any code inside its curly brackets {} will be executed.\nint main()\n{}\nLine 5: cout (pronounced \"see-out\") is an object used together with the insertion operator ( << ) \nto output/print text. In our example, it will output \"Hello World!\".\ncout\n<<\nNote: C++ is case-sensitive: \"cout\" and \"Cout\" has different meaning.\nNote: Every C++ statement ends with a semicolon ; .\n;\nNote: The body of int main() could also been written as: int main () { cout << \"Hello World! \";  return 0; \n}\nint main()\nint main () { cout << \"Hello World! \";  return 0; \n}\nRemember: The compiler ignores white spaces. However, multiple lines makes the code more readable.\nLine 6: return 0; ends the main function.\nreturn 0;\nLine 7: Do not forget to add the closing curly bracket } to actually end the \nmain function.\n}\nOmitting Namespace\nYou might see some C++ programs that runs without the standard namespace library. The using namespace std line can be omitted and replaced with the std keyword, \nfollowed by the :: operator \nfor some objects:\nusing namespace std\nstd\n::\nExample\nIt is up to you if you want to include the standard namespace library or not.",
    "scraped_at": "2025-08-29T13:28:40.893833"
  },
  {
    "tutorial": "C++",
    "title": "C++ Statements",
    "url": "https://www.w3schools.com/cpp/cpp_statements.asp",
    "content": "C++ Statements\nC++ Statements\nA computer program is a list of \"instructions\" to be \"executed\" by a computer.\nIn a programming language, these programming instructions are called statements .\nThe following statement \"instructs\" the compiler to print the text \"Hello World\" \nto the screen:\nExample\nIt is important that you end the statement with a semicolon ;\n;\nIf you forget the semicolon ( ; ), an error will occur \nand the program will not run:\n;\nExample\nerror: expected ';' before 'return'\nTry it Yourself »\nMany Statements\nMost C++ programs contain many statements.\nThe statements are executed, one by one, in the same order as they are \nwritten:\nExample\nFrom the example above, we have three statements:\ncout << \"Hello World!\";\ncout << \"Hello World!\";\ncout << \"Have a good day!\";\ncout << \"Have a good day!\";\nreturn 0;\nreturn 0;\nThe first statement is executed first (print \"Hello World!\" to the screen). Then the second statement is executed (print \"Have a good day!\" to the screen). And at last, the third statement is executed (end the C++ program successfully).\nYou will learn more about statements while reading this tutorial. For now, just remember to always end them with a semicolon to avoid any errors.\nComing up: The next chapter will teach you how to control \n  the output and how to insert new lines to make it more readable.",
    "scraped_at": "2025-08-29T13:28:43.885789"
  },
  {
    "tutorial": "C++",
    "title": "C++ Output (Print Text)",
    "url": "https://www.w3schools.com/cpp/cpp_output.asp",
    "content": "C++ Output (Print Text)\nC++ Output (Print Text)\nThe cout object, together with the << operator, is used to output values and print text.\ncout\n<<\nJust remember to surround the text with double quotes ( \"\" ):\n\"\"\nExample\nYou can add as many cout objects as you want. However, note that it does not insert a new line at the end of the output:\ncout\nExample\nTip: You will learn how to add new lines in the C++ New Lines chapter .",
    "scraped_at": "2025-08-29T13:28:46.917758"
  },
  {
    "tutorial": "C++",
    "title": "C++ Output Numbers",
    "url": "https://www.w3schools.com/cpp/cpp_output_numbers.asp",
    "content": "C++ Output Numbers\nC++ Print Numbers\nYou can also use cout() to \nprint numbers.\ncout()\nHowever, unlike text, we don't put numbers inside double \nquotes:\nExample\nYou can also perform mathematical calculations:\nExample\nExample",
    "scraped_at": "2025-08-29T13:28:49.378882"
  },
  {
    "tutorial": "C++",
    "title": "C++ New Lines",
    "url": "https://www.w3schools.com/cpp/cpp_new_lines.asp",
    "content": "C++ New Lines\nNew Lines\nTo insert a new line in your output, you can use the \\n character:\n\\n\nExample\nYou can also use another << operator and place the \\n character after the text, like this:\n<<\n\\n\nExample\nTip: Two \\n characters after each other will create a blank line:\n\\n\nExample\nAnother way to insert a new line, is with the endl manipulator:\nendl\nExample\nBoth \\n and endl are used to break lines. \nHowever, \\n is most used.\n\\n\nendl\n\\n\n\\n\nThe newline character ( \\n ) is called an escape sequence , and \nit forces the cursor to change its position to the beginning of the next line on the screen. This results in a new line.\n\\n\nExamples of other valid escape sequences are:",
    "scraped_at": "2025-08-29T13:28:51.917600"
  },
  {
    "tutorial": "C++",
    "title": "C++ Comments",
    "url": "https://www.w3schools.com/cpp/cpp_comments.asp",
    "content": "C++ Comments\nC++ Comments\nComments can be used to explain C++ code, and to make it more readable. It can also be used to \nprevent execution when testing alternative code. Comments can be singled-lined or multi-lined.\nSingle-line Comments\nSingle-line comments start with two forward slashes ( // ).\n//\nAny text between // and the end of the line \nis ignored by the compiler (will not be executed).\n//\nThis example uses a single-line comment before a line of code:\nExample\nThis example uses a single-line comment at the end of a line of code:\nExample\nC++ Multi-line Comments\nMulti-line comments start with /* and ends with */ .\n/*\n*/\nAny text between /* and */ will be ignored by \nthe compiler:\n/*\n*/\nExample\nIt is up to you which you want to use. Normally, we use // for short comments, and /* */ for longer.\n//\n/* */",
    "scraped_at": "2025-08-29T13:28:54.667872"
  },
  {
    "tutorial": "C++",
    "title": "C++ Variables",
    "url": "https://www.w3schools.com/cpp/cpp_variables.asp",
    "content": "C++ Variables\nC++ Variables\nVariables are containers for storing data values.\nIn C++, there are different types of variables (defined with different keywords), for example:\nint - stores integers (whole numbers), without decimals, such as 123 or -123\nint\ndouble - stores floating point numbers, with decimals, such as 19.99 or -19.99\ndouble\nchar - stores single characters, such as 'a' or 'B'. \n Char values are surrounded by single quotes\nchar\nstring - stores text, such as \"Hello World\". \n String values are surrounded by double quotes\nstring\nbool - stores values with two states: \n true or false\nbool\nDeclaring (Creating) Variables\nTo create a variable, specify the type and assign it a value:\nSyntax\nWhere type is one of C++ types (such as int ), and variableName is the name of the variable (such as x or myName ). The equal sign is used to assign values to the variable.\nint\nTo create a variable that should store a number, look at the following example:\nExample\nCreate a variable called myNum of type int and assign it the value 15 :\nint\nYou can also declare a variable without assigning the value, and assign the value later:\nExample\nChanging Variable Values\nNote that if you assign a new value to an existing variable, it will overwrite the previous value:\nExample\nOther Types\nA demonstration of other data types:\nExample\nYou will learn more about the individual types in the Data Types chapter.\nDisplay Variables\nThe cout object is used together with the << operator to display variables.\ncout\n<<\nTo combine both text and a variable, separate them with the << operator:\n<<\nExample\nYou can also combine different types, which you will learn more about in a \nlater chapter.\nExample\nAdd Variables Together\nTo add a variable to another variable, you can use the + operator:\n+\nExample",
    "scraped_at": "2025-08-29T13:28:57.615980"
  },
  {
    "tutorial": "C#",
    "title": "C# Tutorial (C Sharp)",
    "url": "https://www.w3schools.com/cs/default.asp",
    "content": "C# Tutorial\nLearn C#\nC# (C-Sharp) is a programming language developed by Microsoft that runs on the .NET \nFramework.\nC# is used to develop web apps, desktop apps, mobile apps, games and much \nmore.\nTip: Sign in to track your progress - it's free.\nExamples in Each Chapter\nOur \"Try it Yourself\" editor makes it easy to learn C#. You can edit C# code and view the result in your browser.\nExample\nusing System;\n\nnamespace HelloWorld\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"Hello World!\");    \n    }\n  }\n}\nusing System;\n\nnamespace HelloWorld\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"Hello World!\");    \n    }\n  }\n}\nTry it Yourself »\nClick on the \"Run example\" button to see how it works.\nWe recommend reading this tutorial, in the sequence listed in the left menu.\nC# Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all C# Exercises\nC# Quiz\nLearn by taking a quiz! The quiz will give you a signal of how much you know, or do not know, about C#.\nStart C# Quiz\nLearn by Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All C# Examples\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nKickstart your career\nGet certified by completing the course",
    "scraped_at": "2025-08-29T13:29:01.751133"
  },
  {
    "tutorial": "C#",
    "title": "Introduction to C#",
    "url": "https://www.w3schools.com/cs/cs_intro.php",
    "content": "C# Introduction\nWhat is C#?\nC# is pronounced \"C-Sharp\".\nIt is an object-oriented programming language created by Microsoft that runs \non the .NET Framework.\nC# has roots from the C family, and the language is close to other popular languages like C++ and Java .\nThe first version was released in year 2002. The latest version, C# \n13 , was released in November 2024.\nC# is used for:\nMobile applications\nDesktop applications\nWeb applications\nWeb services\nWeb sites\nGames\nVR\nDatabase applications\nAnd much, much more!\nWhy Use C#?\nIt is one of the most popular programming languages in the world\nIt is easy to learn and simple to use\nIt has huge community support\nC# is an object-oriented language which gives a clear structure to programs and allows code to be reused, lowering development costs\nAs C# is close to C , C++ and Java , it makes it easy for programmers to switch to C# or vice versa\nGet Started\nThis tutorial will teach you the basics of C#.\nIt is not necessary to have any prior programming experience.",
    "scraped_at": "2025-08-29T13:29:05.252451"
  },
  {
    "tutorial": "C#",
    "title": "Get Started with C#",
    "url": "https://www.w3schools.com/cs/cs_getstarted.php",
    "content": "C# Get Started\nC# IDE\nThe easiest way to get started with C# is to use an IDE.\nAn IDE (Integrated Development Environment) is used to edit and compile code.\nIn our tutorial, we will use Visual Studio Community, which is free to download from https://visualstudio.microsoft.com/vs/community/ .\nApplications written in C# use the .NET Framework, so it makes sense to use \nVisual Studio, as the program, the framework, and the language, are all created by \nMicrosoft.\nC# Install\nOnce the Visual Studio Installer is downloaded and installed, choose the .NET workload and click on the Modify/Install button:\nAfter the installation is complete, click on the Launch button to get started with Visual Studio.\nOn the start window, choose Create a new project :\nThen click on the \"Install more tools and features\" link:\nChoose \"Console App (.NET Core)\" from the list and click on the Next button:\nEnter a name for your project, and click on the Create button:\nVisual Studio will automatically generate some code for your project:\nThe code should look something like this:\nusing System;\n\nnamespace HelloWorld\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"Hello World!\");    \n    }\n  }\n}\nusing System;\n\nnamespace HelloWorld\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"Hello World!\");    \n    }\n  }\n}\nTry it Yourself »\nDon't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, focus on how to run the code.\nRun the program by pressing the F5 button on your keyboard (or click on \" Debug \" -> \" Start Debugging \"). This will compile and execute your code. The result will look something to this:\nHello World! C:\\Users\\Username\\source\\repos\\HelloWorld\\HelloWorld\\bin\\Debug\\netcoreapp3.0\\HelloWorld.exe (process 13784) exited with code 0. To automatically close the console when debugging stops, enable Tools->Options->Debugging->Automatically close the console when debugging stops. Press any key to close this window . . .\nCongratulations ! You have now written and executed your first C# program.\nLearning C# At W3Schools\nWhen learning C# at W3Schools.com, you can use our \"Try it Yourself\" tool, which shows both the code and the result. This will make it easier for \nyou to understand every part as we move forward:\nusing System;\n\nnamespace HelloWorld\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"Hello World!\");    \n    }\n  }\n}\nusing System;\n\nnamespace HelloWorld\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"Hello World!\");    \n    }\n  }\n}\nResult:\nHello World!\nTry it Yourself »",
    "scraped_at": "2025-08-29T13:29:08.213432"
  },
  {
    "tutorial": "C#",
    "title": "C# Syntax",
    "url": "https://www.w3schools.com/cs/cs_syntax.php",
    "content": "C# Syntax\nC# Syntax\nIn the previous chapter, we created a C# file called Program.cs, and we used the following code to print \"Hello World\" to the screen:\nusing System;\n\nnamespace HelloWorld\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"Hello World!\");    \n    }\n  }\n}\nusing System;\n\nnamespace HelloWorld\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"Hello World!\");    \n    }\n  }\n}\nResult:\nHello World!\nTry it Yourself »\nExample explained\nLine 1: using System means \nthat we can use classes from the System namespace.\nusing System\nSystem\nLine 2: A blank line. C# ignores white space. However, multiple lines makes the code more readable.\nLine 3: namespace is used to organize your code, and it is a container for classes and other namespaces.\nnamespace\nLine 4: The curly braces {} marks the beginning and the end of a block of code.\n{}\nLine 5: class is a \ncontainer for data and methods, which brings functionality to your program. Every line of code that runs in C# must be inside a class. In our example, we named the class Program.\nclass\nDon't worry if you don't understand how using \nSystem , namespace and class works. Just think of it as something that (almost) always appears in your program, and that you will learn more about them in a later chapter.\nusing \nSystem\nnamespace\nclass\nLine 7: Another thing that always appear in a C# program is \nthe Main method. Any code inside its curly brackets {} will be executed.\nYou don't have to understand the keywords before and after Main. You will get to \nknow them bit by bit while reading this tutorial.\nMain\n{}\nLine 9: Console is a class of the System namespace, which \nhas a WriteLine() method that is used to output/print text. In our example, it will output \"Hello World!\".\nConsole\nSystem\nWriteLine()\nIf you omit the using System line, you would have to write System.Console.WriteLine() to print/output text.\nusing System\nSystem.Console.WriteLine()\nNote: Every C# statement ends with a semicolon ; .\n;\nNote: C# is case-sensitive; \"MyClass\" and \"myclass\" \nhave \ndifferent meaning.\nNote: Unlike Java , the name of the C# file does not have to match the class name, but they often do (for better organization).\nWhen saving the file, save it using a proper name and add \".cs\" to the end of \nthe filename. To run the example above on your computer, make sure that C# is \nproperly installed: Go to the Get Started Chapter for how to install C#. The output should be:\nHello World!",
    "scraped_at": "2025-08-29T13:29:14.503116"
  },
  {
    "tutorial": "C#",
    "title": "C# Output",
    "url": "https://www.w3schools.com/cs/cs_output.php",
    "content": "C# Output\nC# Output\nTo output values or print text in C#, you can use the WriteLine() method:\nWriteLine()\nExample\nConsole.WriteLine(\"Hello World!\");\nConsole.WriteLine(\"Hello World!\");\nTry it Yourself »\nYou can add as many WriteLine() methods as you want. Note that it will add a new line for each method:\nWriteLine()\nExample\nConsole.WriteLine(\"Hello World!\");\nConsole.WriteLine(\"I am Learning C#\");\nConsole.WriteLine(\"It is awesome!\");\nConsole.WriteLine(\"Hello World!\");\nConsole.WriteLine(\"I am Learning C#\");\nConsole.WriteLine(\"It is awesome!\");\nTry it Yourself »\nYou can also output numbers, and perform mathematical calculations:\nExample\nConsole.WriteLine(3 + 3);\nConsole.WriteLine(3 + 3);\nTry it Yourself »\nThe Write Method\nThere is also a Write() method, which is similar to WriteLine() .\nWrite()\nWriteLine()\nThe only difference is that it does not insert a new line at the end of the output:\nExample\nConsole.Write(\"Hello World! \");\nConsole.Write(\"I will print on the same line.\");\nConsole.Write(\"Hello World! \");\nConsole.Write(\"I will print on the same line.\");\nTry it Yourself »\nNote that we add an extra space when needed (after \"Hello World!\" in the example above), for better readability.\nIn this tutorial, we will only use WriteLine() as it makes it easier to read the output of code.\nWriteLine()",
    "scraped_at": "2025-08-29T13:29:19.300825"
  },
  {
    "tutorial": "C#",
    "title": "C# Comments",
    "url": "https://www.w3schools.com/cs/cs_comments.php",
    "content": "C# Comments\nC# Comments\nComments can be used to explain C# code, and to make it more readable. It can also be used to \nprevent execution when testing alternative code.\nSingle-line Comments\nSingle-line comments start with two forward slashes ( // ).\n//\nAny text between // and the end of the line \nis ignored by C# (will not be executed).\n//\nThis example uses a single-line comment before a line of code:\nExample\n// This is a comment\nConsole.WriteLine(\"Hello World!\");\n// This is a comment\nConsole.WriteLine(\"Hello World!\");\nTry it Yourself »\nThis example uses a single-line comment at the end of a line of code:\nExample\nConsole.WriteLine(\"Hello World!\");  // This is a comment\nConsole.WriteLine(\"Hello World!\");  // This is a comment\nTry it Yourself »\nC# Multi-line Comments\nMulti-line comments start with /* and ends with */ .\n/*\n*/\nAny text between /* and */ will be ignored by C#.\n/*\n*/\nThis example uses a multi-line comment (a comment block) to explain the code:\nExample\n/* The code below will print the words Hello World\nto the screen, and it is amazing */\nConsole.WriteLine(\"Hello World!\");\n/* The code below will print the words Hello World\nto the screen, and it is amazing */\nConsole.WriteLine(\"Hello World!\");\nTry it Yourself »\nIt is up to you which you want to use. Normally, we use // for short comments, and /* */ for longer.\n//\n/* */",
    "scraped_at": "2025-08-29T13:29:22.021016"
  },
  {
    "tutorial": "C#",
    "title": "C# Variables",
    "url": "https://www.w3schools.com/cs/cs_variables.php",
    "content": "C# Variables\nC# Variables\nVariables are containers for storing data values.\nIn C#, there are different types of variables (defined with different keywords), for example:\nint - stores integers (whole numbers), without decimals, such as 123 or -123\nint\ndouble - stores floating point numbers, with decimals, such as 19.99 or -19.99\ndouble\nchar - stores single characters, such as 'a' or 'B'. \n Char values are surrounded by single quotes\nchar\nstring - stores text, such as \"Hello World\". \n String values are surrounded by double quotes\nstring\nbool - stores values with two states: \n true or false\nbool\nDeclaring (Creating) Variables\nTo create a variable, specify the type and assign it a value :\nSyntax\ntype variableName = value;\ntype variableName = value;\nWhere type is a C# type (such as int or string ), and variableName is the name of the variable (such as x or name ). The equal sign is used to assign values to the variable.\nint\nstring\nTo create a variable that should store text, look at the following example:\nExample\nCreate a variable called name of type string and assign it the value \" John \":\nstring\nstring name = \"John\";\nConsole.WriteLine(name);\nstring name = \"John\";\nConsole.WriteLine(name);\nTry it Yourself »\nTo create a variable that should store a number, look at the following example:\nExample\nCreate a variable called myNum of type int and assign it the value 15 :\nint\nint myNum = 15;\nConsole.WriteLine(myNum);\nint myNum = 15;\nConsole.WriteLine(myNum);\nTry it Yourself »\nYou can also declare a variable without assigning the value, and assign the value later:\nExample\nint myNum;\nmyNum = 15;\nConsole.WriteLine(myNum);\nint myNum;\nmyNum = 15;\nConsole.WriteLine(myNum);\nTry it Yourself »\nNote that if you assign a new value to an existing variable, it will overwrite the previous value:\nExample\nChange the value of myNum to 20:\nmyNum\nint myNum = 15;\nmyNum = 20; // myNum is now 20\nConsole.WriteLine(myNum);\nint myNum = 15;\nmyNum = 20; // myNum is now 20\nConsole.WriteLine(myNum);\nTry it Yourself »\nOther Types\nA demonstration of how to declare variables of other types:\nExample\nint myNum = 5;\ndouble myDoubleNum = 5.99D;\nchar myLetter = 'D';\nbool myBool = true;\nstring myText = \"Hello\";\nint myNum = 5;\ndouble myDoubleNum = 5.99D;\nchar myLetter = 'D';\nbool myBool = true;\nstring myText = \"Hello\";\nYou will learn more about data types in a later chapter.",
    "scraped_at": "2025-08-29T13:29:24.896655"
  },
  {
    "tutorial": "C#",
    "title": "C# Constant Variables",
    "url": "https://www.w3schools.com/cs/cs_variables_constants.php",
    "content": "C# Constants\nConstants\nIf you don't want others (or yourself) to overwrite existing values, you can add the const keyword \nin front of the variable type.\nconst\nThis will declare the variable as \"constant\", which means unchangeable and read-only:\nExample\nconst int myNum = 15;\nmyNum = 20; // error\nconst int myNum = 15;\nmyNum = 20; // error\nTry it Yourself »\nThe const keyword is useful when you want a variable to always store the same value, so that others (or yourself) won't mess up your code. An example that is often referred to as a constant, is PI (3.14159...).\nconst\nNote: You cannot declare a constant variable without assigning the value. If you do, an error will occur: A const field requires a value to be provided .",
    "scraped_at": "2025-08-29T13:29:28.191961"
  },
  {
    "tutorial": "C#",
    "title": "C# Display/Print Variables",
    "url": "https://www.w3schools.com/cs/cs_variables_display.php",
    "content": "C# Display Variables\nDisplay Variables\nThe WriteLine() method is often used to \ndisplay variable values to the console window.\nWriteLine()\nTo combine both text and a variable, use the + character:\n+\nExample\nstring name = \"John\";\nConsole.WriteLine(\"Hello \" + name);\nstring name = \"John\";\nConsole.WriteLine(\"Hello \" + name);\nTry it Yourself »\nYou can also use the + character to add a variable to another variable:\n+\nExample\nstring firstName = \"John \";\nstring lastName = \"Doe\";\nstring fullName = firstName + lastName;\nConsole.WriteLine(fullName);\nstring firstName = \"John \";\nstring lastName = \"Doe\";\nstring fullName = firstName + lastName;\nConsole.WriteLine(fullName);\nTry it Yourself »\nFor numeric values, the + character works as a mathematical operator (notice that we use int (integer) variables here):\n+\nint\nExample\nint x = 5;\nint y = 6;\nConsole.WriteLine(x + y); // Print the value of x + y\nint x = 5;\nint y = 6;\nConsole.WriteLine(x + y); // Print the value of x + y\nTry it Yourself »\nFrom the example above, you can expect:\nx stores the value 5\ny stores the value 6\nThen we use the WriteLine() method to display the value of x + y, \n which is 11\nWriteLine()",
    "scraped_at": "2025-08-29T13:29:31.903897"
  },
  {
    "tutorial": "C#",
    "title": "C# Multiple Variables",
    "url": "https://www.w3schools.com/cs/cs_variables_multiple.php",
    "content": "C# Multiple Variables\nDeclare Many Variables\nTo declare more than one variable of the same type , use a comma-separated list:\nExample\nint x = 5, y = 6, z = 50;\nConsole.WriteLine(x + y + z);\nint x = 5, y = 6, z = 50;\nConsole.WriteLine(x + y + z);\nTry it Yourself »\nYou can also assign the same value to multiple variables in one line:\nExample\nint x, y, z;\nx = y = z = 50;\nConsole.WriteLine(x + y + z);\nint x, y, z;\nx = y = z = 50;\nConsole.WriteLine(x + y + z);\nTry it Yourself »",
    "scraped_at": "2025-08-29T13:29:35.252781"
  },
  {
    "tutorial": "SQL",
    "title": "SQL Tutorial",
    "url": "https://www.w3schools.com/sql/default.asp",
    "content": "SQL Tutorial\nLearn SQL\nSQL is a standard language for storing, manipulating and retrieving data \nin databases.\nOur SQL tutorial will teach you how to use SQL in:\nMySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres, and other database systems.\nTip: Sign in to track your progress - it's free.\nExamples in Each Chapter\nWith our online SQL editor, you can edit the SQL statements, and click on a button to view the result.\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nSQL Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all SQL Exercises\nSQL Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All SQL Examples\nSQL Quiz Test\nTest your SQL skills at W3Schools!\nStart SQL Quiz!\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nSQL References\nAt W3Schools you will find a complete reference for keywords and functions:\nSQL Keyword Reference\nMYSQL Functions\nSQLServer Functions\nMS Access Functions\nSQL Quick Reference\nSQL Data Types\nData types and ranges for Microsoft Access, MySQL and SQL Server.\nSQL Data Types\nKickstart your career\nGet certified by completing the course",
    "scraped_at": "2025-08-29T13:29:39.080916"
  },
  {
    "tutorial": "SQL",
    "title": "SQL Introduction",
    "url": "https://www.w3schools.com/sql/sql_intro.asp",
    "content": "Introduction to SQL\nSQL is a standard language for accessing and manipulating databases.\nWhat is SQL?\nSQL stands for Structured Query Language\nSQL lets you access and manipulate databases\nSQL became a standard of the American National Standards Institute (ANSI) \n  in 1986, and of the International Organization for Standardization (ISO) in \n  1987\nWhat Can SQL do?\nSQL can execute queries against a database\nSQL can retrieve data from a database\nSQL can insert records in a database\nSQL can update records in a database\nSQL can delete records from a database\nSQL can create new databases\nSQL can create new tables in a database\nSQL can create stored procedures in a database\nSQL can create views in a database\nSQL can set permissions on tables, procedures, and views\nSQL is a Standard - BUT....\nAlthough SQL is an ANSI/ISO standard, there are different versions of the SQL language.\nHowever, to be compliant with the ANSI standard, they all support at least the major commands (such as SELECT , UPDATE , DELETE , INSERT , WHERE ) in a similar manner.\nSELECT\nUPDATE\nDELETE\nINSERT\nWHERE\nNote: Most of the SQL database programs also have their own proprietary extensions in addition to the SQL standard!\nUsing SQL in Your Web Site\nTo build a web site that shows data from a database, you will need:\nAn RDBMS database program (i.e. MS Access, SQL Server, MySQL)\nTo use a server-side scripting language, like PHP or ASP\nTo use SQL to get the data you want\nTo use HTML / CSS to style the page\nRDBMS\nRDBMS stands for Relational Database Management System.\nRDBMS is the basis for SQL, and for all modern database systems such as MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.\nThe data in RDBMS is stored in database objects called tables. A table is a collection of related data entries and it consists of columns and rows.\nLook at the \"Customers\" table:\nExample\nEvery table is broken up into smaller entities called fields. The fields in \nthe Customers table consist of CustomerID, CustomerName, ContactName, Address, \nCity, PostalCode and Country. A field is a column in a table that is designed to maintain \nspecific information about every record in the table.\nA record, also called a row, is each individual entry that exists in a table. \nFor example, there are 91 records in the above Customers table. A record is a \nhorizontal entity in a table.\nA column is a vertical entity in a table that contains all information \nassociated with a specific field in a table.\nVideo: SQL Introduction",
    "scraped_at": "2025-08-29T13:29:42.483971"
  },
  {
    "tutorial": "SQL",
    "title": "SQL Syntax",
    "url": "https://www.w3schools.com/sql/sql_syntax.asp",
    "content": "SQL Syntax\nSQL Statements\nMost of the actions you need to perform on a database are done with SQL statements.\nSQL statements consist of keywords that are easy to understand.\nThe following SQL statement returns all records from a table named \"Customers\":\nExample\nSelect all records from the Customers table:\nIn this tutorial we will teach you all about the different SQL statements.\nDatabase Tables\nA database most often contains one or more tables. Each table is identified \nby a name (e.g. \"Customers\" or \"Orders\"), and contain records (rows) with \ndata.\nIn this tutorial we will use the well-known Northwind sample database \n(included in MS Access and MS SQL Server).\nBelow is a selection from the Customers table used in the examples:\nThe table above contains five records (one for each customer) and seven columns \n(CustomerID, CustomerName, ContactName, Address, City, PostalCode, and Country).\nKeep in Mind That...\nSQL keywords are NOT case sensitive: select is the same as SELECT\nselect\nSELECT\nIn this tutorial we will write all SQL keywords in upper-case.\nSemicolon after SQL Statements?\nSome database systems require a semicolon at the end of each SQL statement.\nSemicolon is the standard way to separate each SQL statement in database \nsystems that allow more than one SQL statement to be executed in the same call \nto the server.\nIn this tutorial, we will use semicolon at the end of each SQL statement.\nSome of The Most Important SQL Commands\nSELECT - extracts data from a database\nSELECT\nUPDATE - updates data in a database\nUPDATE\nDELETE - deletes data from a database\nDELETE\nINSERT INTO - inserts new data into a database\nINSERT INTO\nCREATE DATABASE - creates a new database\nCREATE DATABASE\nALTER DATABASE - modifies a database\nALTER DATABASE\nCREATE TABLE - creates a new table\nCREATE TABLE\nALTER TABLE - modifies a table\nALTER TABLE\nDROP TABLE - deletes a table\nDROP TABLE\nCREATE INDEX - creates an index (search key)\nCREATE INDEX\nDROP INDEX - deletes an index\nDROP INDEX",
    "scraped_at": "2025-08-29T13:29:45.818775"
  },
  {
    "tutorial": "SQL",
    "title": "SQL SELECT Statement",
    "url": "https://www.w3schools.com/sql/sql_select.asp",
    "content": "SQL SELECT Statement\nThe SQL SELECT Statement\nThe SELECT statement is used to select data from a database.\nSELECT\nExample\nReturn data from the Customers table:\nSyntax\nSELECT column1 , column2, ... FROM table_name ;\nSELECT column1 , column2, ... FROM table_name ;\nHere, column1, column2, ... are the field names of the table you want to select data from.\nThe table_name represents the name of the table you want to select data from.\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nSelect ALL columns\nIf you want to return all columns, without specifying every column name, you can use the SELECT * syntax:\nSELECT *\nExample\nReturn all the columns from the Customers table:\nVideo: SQL SELECT Statement",
    "scraped_at": "2025-08-29T13:29:49.378800"
  },
  {
    "tutorial": "SQL",
    "title": "SQL SELECT DISTINCT Statement",
    "url": "https://www.w3schools.com/sql/sql_distinct.asp",
    "content": "SQL SELECT DISTINCT Statement\nThe SQL SELECT DISTINCT Statement\nThe SELECT DISTINCT statement is used to return only distinct \n(different) values.\nSELECT DISTINCT\nExample\nSelect all the different countries from the \"Customers\" table:\nInside a table, a column often contains many duplicate values; and sometimes you \nonly want to list the different (distinct) values.\nSyntax\nSELECT DISTINCT column1 , column2, ... FROM table_name ;\nSELECT DISTINCT column1 , column2, ... FROM table_name ;\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nSELECT Example Without DISTINCT\nIf you omit the DISTINCT keyword, the SQL statement \nreturns the \"Country\" value from all the records of the \"Customers\" table:\nDISTINCT\nExample\nCount Distinct\nBy using the DISTINCT keyword in a function called COUNT , we can return the number of different countries.\nDISTINCT\nCOUNT\nExample\nNote: The COUNT(DISTINCT column_name ) is not supported in Microsoft Access databases.\nHere is a workaround for MS Access:\nExample\nYou will learn about the COUNT function later in this tutorial.\nVideo: SQL SELECT DISTINCT Statement",
    "scraped_at": "2025-08-29T13:29:52.284365"
  },
  {
    "tutorial": "SQL",
    "title": "SQL WHERE Clause",
    "url": "https://www.w3schools.com/sql/sql_where.asp",
    "content": "SQL WHERE Clause\nThe SQL WHERE Clause\nThe WHERE clause is used to filter records.\nWHERE\nIt is used to extract only those records that fulfill a specified \ncondition.\nExample\nSelect all customers from Mexico:\nSyntax\nSELECT column1 , column2, ... FROM table_name WHERE condition ;\nSELECT column1 , column2, ... FROM table_name WHERE condition ;\nNote: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE , DELETE , etc.!\nWHERE\nSELECT\nUPDATE\nDELETE\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nText Fields vs. Numeric Fields\nSQL requires single quotes around text values (most database systems will \nalso allow double quotes).\nHowever, numeric fields should not be enclosed in quotes:\nExample\nOperators in The WHERE Clause\nYou can use other operators than the = operator to filter the search.\n=\nExample\nSelect all customers with a CustomerID greater than 80:\nThe following operators can be used in the WHERE clause:\nWHERE\nVideo: SQL WHERE Clause",
    "scraped_at": "2025-08-29T13:29:54.977030"
  },
  {
    "tutorial": "SQL",
    "title": "SQL ORDER BY Keyword",
    "url": "https://www.w3schools.com/sql/sql_orderby.asp",
    "content": "SQL ORDER BY Keyword\nThe SQL ORDER BY\nThe ORDER BY keyword is used to sort the result-set in ascending or \ndescending order.\nORDER BY\nExample\nSort the products by price:\nSyntax\nSELECT column1 , column2, ... FROM table_name ORDER BY column1, column2, ... ASC|DESC;\nSELECT column1 , column2, ... FROM table_name ORDER BY column1, column2, ... ASC|DESC;\nDemo Database\nBelow is a selection from the Products table used in the examples:\nDESC\nThe ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.\nORDER BY\nDESC\nExample\nSort the products from highest to lowest price:\nOrder Alphabetically\nFor string values the ORDER BY keyword will order alphabetically:\nORDER BY\nExample\nSort the products alphabetically by ProductName:\nAlphabetically DESC\nTo sort the table reverse alphabetically, use the DESC keyword:\nDESC\nExample\nSort the products by ProductName in reverse order:\nORDER BY Several Columns\nThe following SQL statement selects all customers from the \"Customers\" table, \nsorted by the \"Country\" and the \"CustomerName\" column. This means that it orders \nby Country, but if some rows have the same Country, it orders them by \nCustomerName:\nExample\nUsing Both ASC and DESC\nThe following SQL statement selects all customers from the \"Customers\" table, \nsorted ascending by the \"Country\" and descending by the \"CustomerName\" column:\nExample\nVideo: SQL ORDER BY Keyword",
    "scraped_at": "2025-08-29T13:29:57.720925"
  },
  {
    "tutorial": "SQL",
    "title": "SQL AND Operator",
    "url": "https://www.w3schools.com/sql/sql_and.asp",
    "content": "SQL AND Operator\nThe SQL AND Operator\nThe WHERE clause can contain one or many AND operators.\nWHERE\nAND\nThe AND operator is used to filter records based on more than one \ncondition, like if you want to return all customers from Spain that starts with the letter 'G':\nAND\nExample\nSyntax\nSELECT column1 , column2, ... FROM table_name WHERE condition1 AND condition2 AND condition3 ... ;\nSELECT column1 , column2, ... FROM table_name WHERE condition1 AND condition2 AND condition3 ... ;\nAND vs OR\nThe AND operator displays a record if all the conditions are TRUE.\nAND\nThe OR operator displays a record if any of the conditions are TRUE.\nOR\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nAll Conditions Must Be True\nThe following SQL statement selects all fields from Customers where Country is \"Brazil\" AND City is \"Rio de Janeiro\" AND CustomerID is higher than 50:\nCustomers\nCountry\nCity\nCustomerID\nExample\nCombining AND and OR\nYou can combine the AND and OR operators.\nAND\nOR\nThe following SQL statement selects all customers from Spain that starts with a \"G\" or an \"R\".\nMake sure you use parenthesis to get the correct result.\nExample\nSelect all Spanish customers that starts with either \"G\" or \"R\":\nWithout parenthesis, the select statement will return all customers from Spain that starts with a \"G\", plus all customers that starts with an \"R\", regardless of the country value:\nExample\nSelect all customers that either: are from Spain and starts with either \"G\", or starts with the letter \"R\":\nVideo: SQL AND Operator",
    "scraped_at": "2025-08-29T13:30:00.580293"
  },
  {
    "tutorial": "SQL",
    "title": "SQL OR Operator",
    "url": "https://www.w3schools.com/sql/sql_or.asp",
    "content": "SQL OR Operator\nThe SQL OR Operator\nThe WHERE clause can contain one or more OR operators.\nWHERE\nOR\nThe OR operator \nis used to filter records based on more than one condition, like if you want to \nreturn all customers from Germany but also those from Spain:\nOR\nExample\nSelect all customers from Germany or Spain:\nSyntax\nSELECT column1 , column2, ... FROM table_name WHERE condition1 OR condition2 OR condition3 ... ;\nSELECT column1 , column2, ... FROM table_name WHERE condition1 OR condition2 OR condition3 ... ;\nOR vs AND\nThe OR operator displays a record if any of the conditions are TRUE.\nOR\nThe AND operator displays a record if all the conditions are TRUE.\nAND\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nAt Least One Condition Must Be True\nThe following SQL statement selects all fields from Customers where either City is \"Berlin\", CustomerName starts with the letter \"G\" or Country is \"Norway\":\nCity\nCustomerName\nCountry\nExample\nCombining AND and OR\nYou can combine the AND and OR operators.\nAND\nOR\nThe following SQL statement selects all customers from Spain that starts with a \"G\" or an \"R\".\nMake sure you use parenthesis to get the correct result.\nExample\nSelect all Spanish customers that starts with either \"G\" or \"R\":\nWithout parenthesis, the select statement will return all customers from Spain that starts with a \"G\", plus all customers that starts with an \"R\", regardless of the country value:\nExample\nSelect all customers that either: are from Spain and starts with either \"G\", or starts with the letter \"R\":",
    "scraped_at": "2025-08-29T13:30:03.853396"
  },
  {
    "tutorial": "SQL",
    "title": "SQL NOT Operator",
    "url": "https://www.w3schools.com/sql/sql_not.asp",
    "content": "SQL NOT Operator\nThe NOT Operator\nThe NOT operator is used in combination with \nother operators to give the opposite result, also called the negative result.\nNOT\nIn the select statement below we want to return all customers that are NOT \nfrom Spain:\nExample\nSelect only the customers that are NOT from Spain:\nIn the example above, the NOT operator is used in combination with the = operator, but it can be used in combination with other comparison and/or logical operators.\nSee examples below.\nNOT\n=\nSyntax\nSELECT column1 , column2, ... FROM table_name WHERE NOT condition ;\nSELECT column1 , column2, ... FROM table_name WHERE NOT condition ;\nDemo Database\nBelow is a selection from the Customers table used in the examples:\nNOT LIKE\nExample\nSelect customers that does not start with the letter 'A':\nNOT BETWEEN\nExample\nSelect customers with a customerID not between 10 and 60:\nNOT IN\nExample\nSelect customers that are not from Paris or London:\nNOT Greater Than\nExample\nSelect customers with a CustomerId not greater than 50:\nNOT Less Than\nExample\nSelect customers with a CustomerID not less than 50:\nVideo: SQL NOT Operator",
    "scraped_at": "2025-08-29T13:30:06.920609"
  },
  {
    "tutorial": "PHP",
    "title": "PHP Tutorial",
    "url": "https://www.w3schools.com/php/default.asp",
    "content": "PHP Tutorial\nLearn PHP\nPHP is a server scripting language, and a powerful tool for making dynamic and interactive Web pages.\nPHP is a widely-used, free, and efficient alternative to competitors such as Microsoft's ASP.\nTip: Sign in to track your progress - it's free.\nEasy Learning with \"PHP Tryit\"\nWith our online \"PHP Tryit\" editor, you can edit the PHP code, and click \non a button to view the result.\nExample\n<!DOCTYPE html>\n<html>\n<body>\n \n<?php\necho \"My first PHP script!\";\n?>\n\n</body>\n</html>\n<!DOCTYPE html>\n<html>\n<body>\n \n<?php\necho \"My first PHP script!\";\n?>\n\n</body>\n</html>\nClick on the \"Try it Yourself\" button to see how it works.\nPHP Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all PHP Exercises\nPHP Examples\nLearn by examples! This tutorial supplements all explanations with clarifying examples.\nSee All PHP Examples\nPHP Quiz Test\nLearn by taking a quiz! This quiz will give you a signal of how much you know, or do not know, about PHP.\nStart PHP Quiz!\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nPHP References\nW3Schools' PHP reference contains different categories of all PHP functions, keywords and constants, along with examples.\nKickstart your career\nGet certified by completing the course",
    "scraped_at": "2025-08-29T13:30:10.209317"
  },
  {
    "tutorial": "PHP",
    "title": "PHP Introduction",
    "url": "https://www.w3schools.com/php/php_intro.asp",
    "content": "PHP Introduction\nPHP code is executed on the server.\nWhat You Should Already Know\nBefore you continue you should have a basic understanding of the following:\nHTML\nCSS\nJavaScript\nIf you want to study these subjects first, find the tutorials on our Home page .\nWhat is PHP?\nPHP is an acronym for \"PHP: Hypertext Preprocessor\"\nPHP is a widely-used, open source scripting language\nPHP scripts are executed on the server\nPHP is free to download and use\nPHP is an amazing and popular language!\nIt is powerful enough to be at the core of the biggest \nblogging system on the web (WordPress)! It is deep enough to run large social networks! It is also easy enough to be a beginner's first server side \nlanguage!\nWhat is a PHP File?\nPHP files can contain text, HTML, CSS, JavaScript, and PHP code\nPHP code is executed on the server, and the result is returned to the browser as plain HTML\nPHP files have extension \" .php \"\n.php\nWhat Can PHP Do?\nPHP can generate dynamic page content\nPHP can create, open, read, write, delete, and close files on the server\nPHP can collect form data\nPHP can send and receive cookies\nPHP can add, delete, modify data in your database\nPHP can be used to control user-access\nPHP can encrypt data\nWith PHP you are not limited to output HTML. You can output images or PDF \nfiles. You can also output any text, such as XHTML and \nXML.\nWhy PHP?\nPHP runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)\nPHP is compatible with almost all servers used today (Apache, IIS, etc.)\nPHP supports a wide range of databases\nPHP is free. Download it from the official PHP resource: www.php.net\nPHP is easy to learn and runs efficiently on the server side\nWhat's new in PHP 7\nPHP 7 is much faster than the previous popular stable release (PHP 5.6)\nPHP 7 has improved Error Handling\nPHP 7 supports stricter Type Declarations for function arguments\nPHP 7 supports new operators (like the spaceship operator: <=> )\n<=>",
    "scraped_at": "2025-08-29T13:30:13.265043"
  },
  {
    "tutorial": "PHP",
    "title": "PHP Installation",
    "url": "https://www.w3schools.com/php/php_install.asp",
    "content": "PHP Installation\nWhat Do I Need?\nTo start using PHP, you can:\nFind a web host with PHP and MySQL support\nInstall a web server on your own PC, and then install PHP and MySQL\nUse a Web Host With PHP Support\nIf your server has activated support for PHP you do not \nneed to do anything.\nJust create some .php files, place them in your web directory, and the server \nwill automatically parse them for you.\n.php\nYou do not need to compile anything or install any extra tools.\nBecause PHP is free, most web hosts \noffer PHP support.\nSet Up PHP on Your Own PC\nHowever, if your server does not support PHP, you must:\ninstall a web server\ninstall PHP\ninstall a database, such as MySQL\nThe official PHP website (PHP.net) has installation instructions for PHP: http://php.net/manual/en/install.php\nPHP Online Compiler / Editor\nWith w3schools' online PHP compiler, you can edit PHP code, and view the result in your browser.\nExample\nI love PHP!\nClick on the \"Try it Yourself\" button to see how it works.\nPHP Version\nTo check your php version you can use the phpversion() function:\nphpversion()\nExample\nDisplay the PHP version:\necho phpversion();\necho phpversion();",
    "scraped_at": "2025-08-29T13:30:16.283198"
  },
  {
    "tutorial": "PHP",
    "title": "PHP Syntax",
    "url": "https://www.w3schools.com/php/php_syntax.asp",
    "content": "PHP Syntax\nA PHP script is executed on the server, and the plain HTML result is sent back to the browser.\nBasic PHP Syntax\nA PHP script can be placed anywhere in the document.\nA PHP script starts with <?php and ends with ?> :\n<?php\n?>\n<?php\n// PHP code goes here\n?>\n<?php\n// PHP code goes here\n?>\nThe default file extension for PHP files is \" .php \".\n.php\nA PHP file normally contains HTML tags, and some PHP scripting code.\nBelow, we have an example of a simple PHP file, with a PHP script that uses a \nbuilt-in PHP function \" echo \" to output the text\n\"Hello World!\" on a web page:\necho\nExample\nA simple .php file with both HTML code and PHP code:\n.php\n<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My first PHP page</h1>\n\n<?php\necho \"Hello World!\";\n?>\n\n</body>\n</html>\n<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My first PHP page</h1>\n\n<?php\necho \"Hello World!\";\n?>\n\n</body>\n</html>\nNote: PHP statements end with a semicolon ( ; ).\n;\nPHP Case Sensitivity\nIn PHP, keywords (e.g. if , else , while , echo , etc.), classes, functions, \nand user-defined functions are not case-sensitive.\nif\nelse\nwhile\necho\nIn the example below, all three echo statements below are equal and legal:\nExample\nECHO is the same as echo :\nECHO\necho\n<!DOCTYPE html>\n<html>\n<body>\n\n<?php\nECHO \"Hello World!<br>\";\necho \"Hello World!<br>\";\nEcHo \"Hello World!<br>\";\n?>\n\n</body>\n</html>\n<!DOCTYPE html>\n<html>\n<body>\n\n<?php\nECHO \"Hello World!<br>\";\necho \"Hello World!<br>\";\nEcHo \"Hello World!<br>\";\n?>\n\n</body>\n</html>\nNote: However; all variable names are case-sensitive!\nLook at the example below; only the first statement will display the value of the $color variable! This is because $color , $COLOR , and $coLOR are treated as three \ndifferent variables:\n$color\n$color\n$COLOR\n$coLOR\nExample\n$COLOR is not same as $color :\n$COLOR\n$color\n<!DOCTYPE html>\n<html>\n<body>\n\n<?php $color = \"red\";\necho \"My car is \" . $color . \"<br>\";\necho \"My house is \" . $COLOR . \"<br>\";\necho \"My boat is \" . $coLOR . \"<br>\";\n?>\n\n</body>\n</html>\n<!DOCTYPE html>\n<html>\n<body>\n\n<?php $color = \"red\";\necho \"My car is \" . $color . \"<br>\";\necho \"My house is \" . $COLOR . \"<br>\";\necho \"My boat is \" . $coLOR . \"<br>\";\n?>\n\n</body>\n</html>",
    "scraped_at": "2025-08-29T13:30:19.293189"
  },
  {
    "tutorial": "PHP",
    "title": "PHP Comments",
    "url": "https://www.w3schools.com/php/php_comments.asp",
    "content": "PHP Comments\nComments in PHP\nA comment in PHP code is a line that is not executed as a part of the \nprogram. Its only purpose is to be read by someone who is looking at the code.\nComments can be used to:\nLet others understand your code\nRemind yourself of what you did - Most programmers have experienced coming back to their own work a year or two later and having to re-figure out what they did. Comments can remind you of what you were thinking when you wrote the code\nLeave out some parts of your code\nPHP supports several ways of commenting:\nExample\nSyntax for comments in PHP code:\n// This is a single-line comment\n\n# This is also a single-line comment\n\n/* This is a\nmulti-line comment */\n// This is a single-line comment\n\n# This is also a single-line comment\n\n/* This is a\nmulti-line comment */\nSingle Line Comments\nSingle line comments start with // .\n//\nAny text between // and the end of the line will be ignored (will not be executed).\n//\nYou can also use # for single line comments,\nbut in this tutorial we will use // .\n#\n//\nThe following examples uses a single-line comment as an explanation:\nExample\nA comment before the code:\n// Outputs a welcome message:\necho \"Welcome Home!\";\n// Outputs a welcome message:\necho \"Welcome Home!\";\nExample\nA comment at the end of a line:\necho \"Welcome Home!\"; // Outputs a welcome message\necho \"Welcome Home!\"; // Outputs a welcome message\nComments to Ignore Code\nWe can use comments to prevent code lines from being executed:\nExample\nDo not display a welcome message:\n// echo \"Welcome Home!\";\n// echo \"Welcome Home!\";",
    "scraped_at": "2025-08-29T13:30:22.700341"
  },
  {
    "tutorial": "PHP",
    "title": "PHP Multiline Comments",
    "url": "https://www.w3schools.com/php/php_comments_multiline.asp",
    "content": "PHP Multiline Comments\nMulti-line Comments\nMulti-line comments start with /* and end with */ .\n/*\n*/\nAny text between /* and */ will be ignored.\n/*\n*/\nThe following example uses a multi-line comment as an explanation:\nExample\nMulti-line comment as an explanation:\n/*\nThe next statement will\nprint a welcome message\n*/\necho \"Welcome Home!\";\n/*\nThe next statement will\nprint a welcome message\n*/\necho \"Welcome Home!\";\nMulti-line Comments to Ignore Code\nWe can use multi-line comments to prevent blocks of code from being executed:\nExample\nMulti-line comment to ignore code:\n/*\necho \"Welcome to my home!\";\necho \"Mi casa su casa!\";\n*/\necho \"Hello!\";\n/*\necho \"Welcome to my home!\";\necho \"Mi casa su casa!\";\n*/\necho \"Hello!\";\nComments in the Middle of the Code\nThe multi-line comment syntax can also be used to prevent execution of parts \ninside a code-line:\nExample\nThe + 15 part will be ignored in the \ncalculation:\n+ 15\n$x = 5 /* + 15 */ + 5;\necho $x;\n$x = 5 /* + 15 */ + 5;\necho $x;",
    "scraped_at": "2025-08-29T13:30:26.815678"
  },
  {
    "tutorial": "PHP",
    "title": "PHP Variables",
    "url": "https://www.w3schools.com/php/php_variables.asp",
    "content": "PHP Variables\nVariables are \"containers\" for storing information.\nCreating (Declaring) PHP Variables\nIn PHP, a variable starts with the $ sign, followed by the name of the variable:\n$\nExample\n$x = 5;\n$y = \"John\";\n$x = 5;\n$y = \"John\";\nIn the example above, the variable $x will hold the value 5 , and the variable $y will hold the value \"John\" .\n$x\n5\n$y\n\"John\"\nNote: When you assign a text value to a variable, put quotes around the value.\nNote: Unlike other programming languages, PHP has no command \nfor declaring a variable. It is created the moment you first assign a value to \nit.\nThink of variables as containers for storing data.\nPHP Variables\nA variable can have a short name (like $x and $y ) or a more descriptive name ( $age , $carname , $total_volume ).\n$x\n$y\n$age\n$carname\n$total_volume\nRules for PHP variables:\nA variable starts with the $ sign, followed by the name of the variable\n$\nA variable name must start with a letter or the underscore character\nA variable name cannot start with a number\nA variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )\nVariable names are case-sensitive ( $age and $AGE are two different variables)\n$age\n$AGE\nRemember that PHP variable names are case-sensitive!\nOutput Variables\nThe PHP echo statement is often used to output data to the screen.\necho\nThe following example will show how to output text and a variable:\nExample\n$txt = \"W3Schools.com\";\necho \"I love $txt!\";\n$txt = \"W3Schools.com\";\necho \"I love $txt!\";\nThe following example will produce the same output as the example above:\nExample\n$txt = \"W3Schools.com\";\necho \"I love \" . $txt . \"!\";\n$txt = \"W3Schools.com\";\necho \"I love \" . $txt . \"!\";\nThe following example will output the sum of two variables:\nExample\n$x = 5;\n$y = 4;\necho $x + $y;\n$x = 5;\n$y = 4;\necho $x + $y;\nNote: You will learn more about the echo statement and how \nto output data to the screen in the PHP Echo/Print chapter .\necho\nPHP is a Loosely Typed Language\nIn the example above, notice that we did not have to tell PHP which data type the variable is.\nPHP automatically associates a data type to the variable, depending on its value. \nSince the data types are not set in a strict sense, you can do things like \nadding a string to an integer without causing an error.\nIn PHP 7, type declarations were added. This gives an option to specify \nthe data type expected when declaring a function, and by enabling the strict requirement, it will throw a \"Fatal \nError\" on a type mismatch.\nYou will learn more about strict and non-strict requirements, and  \ndata type declarations in the PHP Functions chapter.\nstrict\nnon-strict\nVariable Types\nPHP has no command for declaring a variable, and the data type depends on the value of the variable.\nExample\n$x = 5;      // $x is an integer\n$y = \"John\"; // $y is a string\necho $x;\necho $y;\n$x = 5;      // $x is an integer\n$y = \"John\"; // $y is a string\necho $x;\necho $y;\nPHP supports the following data types:\nString\nInteger\nFloat (floating point numbers - also called double)\nBoolean\nArray\nObject\nNULL\nResource\nGet the Type\nTo get the data type of a variable, use the var_dump() function.\nvar_dump()\nExample\nThe var_dump() function returns the data type and the value:\nvar_dump()\n$x = 5;\nvar_dump($x);\n$x = 5;\nvar_dump($x);\nExample\nSee what var_dump() returns for other data types:\nvar_dump()\nvar_dump(5);\nvar_dump(\"John\");\nvar_dump(3.14);\nvar_dump(true);\nvar_dump([2, 3, 56]);\nvar_dump(NULL);\nvar_dump(5);\nvar_dump(\"John\");\nvar_dump(3.14);\nvar_dump(true);\nvar_dump([2, 3, 56]);\nvar_dump(NULL);\nAssign String to a Variable\nAssigning a string to a variable is done with the variable name followed by an equal sign and the string:\nExample\n$x = \"John\";\necho $x;\n$x = \"John\";\necho $x;\nString variables can be declared either by using double or single quotes, but you should\nbe aware of the differences. Learn more about the differences in the PHP Strings chapter .\nAssign Multiple Values\nYou can assign the same value to multiple variables in one line:\nExample\nAll three variables get the value \"Fruit\":\n$x = $y = $z = \"Fruit\";\n$x = $y = $z = \"Fruit\";",
    "scraped_at": "2025-08-29T13:30:31.879289"
  },
  {
    "tutorial": "PHP",
    "title": "PHP Variables Scope",
    "url": "https://www.w3schools.com/php/php_variables_scope.asp",
    "content": "PHP Variables Scope\nPHP Variables Scope\nIn PHP, variables can be declared anywhere in the script.\nThe scope of a variable is the part of the script where the variable can be referenced/used.\nPHP has three different variable scopes:\nlocal\nglobal\nstatic\nGlobal and Local Scope\nA variable declared outside a function has a GLOBAL SCOPE and can only \nbe accessed outside a function:\nExample\nVariable with global scope:\n$x = 5; // global scope\n\nfunction myTest() {\n  // using x inside this function will generate an error\n  echo \"<p>Variable x inside function is: $x</p>\";\n}\nmyTest();\n\necho \"<p>Variable x outside function is: $x</p>\";\n$x = 5; // global scope\n\nfunction myTest() {\n  // using x inside this function will generate an error\n  echo \"<p>Variable x inside function is: $x</p>\";\n}\nmyTest();\n\necho \"<p>Variable x outside function is: $x</p>\";\nA variable declared within a function has a LOCAL SCOPE and can only \nbe accessed within that function:\nExample\nVariable with local scope:\nfunction myTest() {\n  $x = 5; // local scope\n  echo \"<p>Variable x inside function is: $x</p>\";\n}\nmyTest();\n\n// using x outside the function will generate an error\necho \"<p>Variable x outside function is: $x</p>\";\nfunction myTest() {\n  $x = 5; // local scope\n  echo \"<p>Variable x inside function is: $x</p>\";\n}\nmyTest();\n\n// using x outside the function will generate an error\necho \"<p>Variable x outside function is: $x</p>\";\nYou can have local variables with the same name in different functions, \nbecause local variables are only recognized by the function in which they are \ndeclared.\nPHP The global Keyword\nThe global keyword is used to access a global variable from within a function.\nglobal\nTo do this, use the global keyword before the variables (inside the \nfunction):\nglobal\nExample\n$x = 5;\n$y = 10;\n\nfunction myTest() {\n  global $x, $y;\n  $y = $x + $y;\n}\n\nmyTest();\necho $y; // outputs 15\n$x = 5;\n$y = 10;\n\nfunction myTest() {\n  global $x, $y;\n  $y = $x + $y;\n}\n\nmyTest();\necho $y; // outputs 15\nPHP also stores all global variables in an array called $GLOBALS[ index ] . \nThe index holds the name of the variable. This array is also accessible from \nwithin functions and can be used to update global variables directly.\n$GLOBALS[ index ]\nindex\nThe example above can be rewritten like this:\nExample\n$x = 5;\n$y = 10;\n\nfunction myTest() {\n  $GLOBALS['y'] = $GLOBALS['x'] + $GLOBALS['y'];\n}\n\nmyTest();\necho $y; // outputs 15\n$x = 5;\n$y = 10;\n\nfunction myTest() {\n  $GLOBALS['y'] = $GLOBALS['x'] + $GLOBALS['y'];\n}\n\nmyTest();\necho $y; // outputs 15\nPHP The static Keyword\nNormally, when a function is completed/executed, all of its variables are deleted. \nHowever, sometimes we want a local variable NOT to be deleted. We need it for a \nfurther job.\nTo do this, use the static keyword when you first declare the \nvariable:\nstatic\nExample\nfunction myTest() {\n  static $x = 0;\n  echo $x;\n  $x++;\n}\n\nmyTest();\nmyTest();\nmyTest();\nfunction myTest() {\n  static $x = 0;\n  echo $x;\n  $x++;\n}\n\nmyTest();\nmyTest();\nmyTest();\nThen, each time the function is called, that variable will still have the \ninformation it contained from the last time the function was called.\nNote: The variable is still local to the function.",
    "scraped_at": "2025-08-29T13:30:35.348816"
  },
  {
    "tutorial": "PHP",
    "title": "PHP Echo and Print Statements",
    "url": "https://www.w3schools.com/php/php_echo_print.asp",
    "content": "PHP echo and print Statements\nWith PHP, there are two basic ways to output data to the \nscreen: echo and print .\necho\nprint\nPHP echo and print Statements\nBoth echo and print are used to output data to the screen.\necho\nprint\nThe differences are small:\necho has no return value, while print has a return value of 1 so it can \n  be used in expressions\necho\nprint\necho can take multiple parameters, \nwhile print can \n  take one argument\necho\nprint\necho is marginally \nfaster than print\necho\nprint\nThe PHP echo Statement\nThe echo statement can be used with or without parentheses: echo or echo() .\necho\necho\necho()\nExample\necho \"Hello\";\n//same as:\necho(\"Hello\");\necho \"Hello\";\n//same as:\necho(\"Hello\");\nDisplay Text\nThe following example shows how to output text with the echo command (notice that the text can contain HTML markup):\necho\nExample\necho \"<h2>PHP is Fun!</h2>\";\necho \"Hello world!<br>\";\necho \"I'm about to learn PHP!<br>\";\necho \"This \", \"string \", \"was \", \"made \", \"with multiple parameters.\";\necho \"<h2>PHP is Fun!</h2>\";\necho \"Hello world!<br>\";\necho \"I'm about to learn PHP!<br>\";\necho \"This \", \"string \", \"was \", \"made \", \"with multiple parameters.\";\nDisplay Variables\nThe following example shows how to output text and variables with the echo statement:\necho\nExample\n$txt1 = \"Learn PHP\";\n$txt2 = \"W3Schools.com\";\n\necho \"<h2>$txt1</h2>\";\necho \"<p>Study PHP at $txt2</p>\";\n$txt1 = \"Learn PHP\";\n$txt2 = \"W3Schools.com\";\n\necho \"<h2>$txt1</h2>\";\necho \"<p>Study PHP at $txt2</p>\";\nUsing Single Quotes\nStrings are surrounded by quotes, but there is a difference between single \nand double quotes in PHP.\nWhen using double quotes, variables can be inserted to the string as in the \nexample above.\nWhen using single quotes, variables have to be inserted using the . operator, like this:\n.\nExample\n$txt1 = \"Learn PHP\";\n$txt2 = \"W3Schools.com\";\n\necho '<h2>' . $txt1 . '</h2>';\necho '<p>Study PHP at ' . $txt2 . '</p>';\n$txt1 = \"Learn PHP\";\n$txt2 = \"W3Schools.com\";\n\necho '<h2>' . $txt1 . '</h2>';\necho '<p>Study PHP at ' . $txt2 . '</p>';\nThe PHP print Statement\nThe print statement can be used with or without \nparentheses: print or print() .\nprint\nprint\nprint()\nExample\nprint \"Hello\";\n//same as:\nprint(\"Hello\");\nprint \"Hello\";\n//same as:\nprint(\"Hello\");\nDisplay Text\nThe following example shows how to output text with the print command (notice that the text can contain HTML markup):\nprint\nExample\nprint \"<h2>PHP is Fun!</h2>\";\nprint \"Hello world!<br>\";\nprint \"I'm about to learn PHP!\";\nprint \"<h2>PHP is Fun!</h2>\";\nprint \"Hello world!<br>\";\nprint \"I'm about to learn PHP!\";\nDisplay Variables\nThe following example shows how to output text and variables with the print statement:\nprint\nExample\n$txt1 = \"Learn PHP\";\n$txt2 = \"W3Schools.com\";\n\nprint \"<h2>$txt1</h2>\";\nprint \"<p>Study PHP at $txt2</p>\";\n$txt1 = \"Learn PHP\";\n$txt2 = \"W3Schools.com\";\n\nprint \"<h2>$txt1</h2>\";\nprint \"<p>Study PHP at $txt2</p>\";\nUsing Single Quotes\nStrings are surrounded by quotes, but there is a difference between single \nand double quotes in PHP.\nWhen using double quotes, variables can be inserted to the string as in the \nexample above.\nWhen using single quotes, variables have to be inserted using the . operator, like this:\n.\nExample\n$txt1 = \"Learn PHP\";\n$txt2 = \"W3Schools.com\";\n\nprint '<h2>' . $txt1 . '</h2>';\nprint '<p>Study PHP at ' . $txt2 . '</p>';\n$txt1 = \"Learn PHP\";\n$txt2 = \"W3Schools.com\";\n\nprint '<h2>' . $txt1 . '</h2>';\nprint '<p>Study PHP at ' . $txt2 . '</p>';",
    "scraped_at": "2025-08-29T13:30:38.533464"
  },
  {
    "tutorial": "PHP",
    "title": "PHP Data Types",
    "url": "https://www.w3schools.com/php/php_datatypes.asp",
    "content": "PHP Data Types\nPHP Data Types\nVariables can store data of different types, and different data types can do \ndifferent things.\nPHP supports the following data types:\nString\nInteger\nFloat (floating point numbers - also called double)\nBoolean\nArray\nObject\nNULL\nResource\nGet the Data Type\nYou can get the data type of any object by using the var_dump() function.\nvar_dump()\nExample\nThe var_dump() function returns the data type and the value:\nvar_dump()\n$x = 5;\nvar_dump($x);\n$x = 5;\nvar_dump($x);\nPHP String\nA string is a sequence of characters, like \"Hello world!\".\nA string can be any text inside quotes. You can use single or double quotes:\nExample\n$x = \"Hello world!\";\n$y = 'Hello world!';\n\nvar_dump($x);\necho \"<br>\";\nvar_dump($y);\n$x = \"Hello world!\";\n$y = 'Hello world!';\n\nvar_dump($x);\necho \"<br>\";\nvar_dump($y);\nPHP Integer\nAn integer data type is a non-decimal number between -2,147,483,648 and \n2,147,483,647.\nRules for integers:\nAn integer must have at least one digit\nAn integer must not have a decimal point\nAn integer can be either positive or negative\nIntegers can be specified in: decimal (base 10), hexadecimal (base 16), octal (base \n  8), or binary (base 2) notation\nIn the following example $x is an integer. The var_dump() function returns the data type and value:\n$x\nvar_dump()\nExample\n$x = 5985;\nvar_dump($x);\n$x = 5985;\nvar_dump($x);\nPHP Float\nA float (floating point number) is a number with a decimal point or a number in exponential form.\nIn the following example $x is a float. The var_dump() function returns the data type and value:\n$x\nvar_dump()\nExample\n$x = 10.365;\nvar_dump($x);\n$x = 10.365;\nvar_dump($x);\nPHP Boolean\nA Boolean represents two possible states: TRUE or FALSE.\nExample\n$x = true;\nvar_dump($x);\n$x = true;\nvar_dump($x);\nBooleans are often used in conditional testing.\nYou will learn more about \nconditional testing in the PHP If...Else chapter .\nPHP Array\nAn array stores multiple values in one single variable.\nIn the following example $cars is an array. The var_dump() function returns the data type and value:\n$cars\nvar_dump()\nExample\n$cars = array(\"Volvo\",\"BMW\",\"Toyota\");\nvar_dump($cars);\n$cars = array(\"Volvo\",\"BMW\",\"Toyota\");\nvar_dump($cars);\nYou will learn a lot more about arrays in later chapters of this tutorial.\nPHP Object\nClasses and objects are the two main aspects of object-oriented programming.\nA class is a template for objects, and an object is an instance of a class.\nWhen the individual objects are created, they inherit all the properties and \nbehaviors from the class, but each object will have different values for the \nproperties.\nLet's assume we have a class named Car that \ncan have properties like model, \ncolor, etc. We can define variables like $model , $color , and so on, to hold the \nvalues of these properties.\nCar\n$model\n$color\nWhen the individual objects (Volvo, BMW, Toyota, etc.) are created, they \ninherit all the properties and behaviors from the class, but each object will \nhave different values for the properties.\nIf you create a __construct() function, PHP will automatically call this \nfunction when you create an object from a class.\n__construct()\nExample\nclass Car {\n  public $color;\n  public $model;\n  public function __construct($color, $model) {\n    $this->color = $color;\n    $this->model = $model;\n  }\n  public function message() {\n    return \"My car is a \" . $this->color . \" \" . $this->model . \"!\";\n  }\n}\n\n$myCar = new Car(\"red\", \"Volvo\");\nvar_dump($myCar);\nclass Car {\n  public $color;\n  public $model;\n  public function __construct($color, $model) {\n    $this->color = $color;\n    $this->model = $model;\n  }\n  public function message() {\n    return \"My car is a \" . $this->color . \" \" . $this->model . \"!\";\n  }\n}\n\n$myCar = new Car(\"red\", \"Volvo\");\nvar_dump($myCar);\nDo not worry if you do not understand the PHP Object syntax, you will learn more about that in the PHP Classes/Objects chapter .\nPHP NULL Value\nNull is a special data type which can have only one value: NULL.\nA variable of data type NULL is a variable that has no value assigned to it.\nTip: If a variable is created without a value, it is \nautomatically assigned a value of NULL.\nVariables can also be emptied by setting the value to NULL:\nExample\n$x = \"Hello world!\";\n$x = null;\nvar_dump($x);\n$x = \"Hello world!\";\n$x = null;\nvar_dump($x);\nChange Data Type\nIf you assign an integer value to a variable, the type will automatically be an integer.\nIf you assign a string to the same variable, the type will change to a string:\nExample\n$x = 5;\nvar_dump($x);\n\n$x = \"Hello\";\nvar_dump($x);\n$x = 5;\nvar_dump($x);\n\n$x = \"Hello\";\nvar_dump($x);\nIf you want to change the data type of an existing variable, but not by \nchanging the value, you can use casting.\nCasting allows you to change data type on variables:\nExample\n$x = 5;\n$x = (string) $x;\nvar_dump($x);\n$x = 5;\n$x = (string) $x;\nvar_dump($x);\nYou will learn more about casting in the PHP Casting Chapter .\nPHP Resource\nThe special resource type is not an actual data type. It is the storing of a \nreference to functions and resources external to PHP.\nA common example of \nusing the resource data type is a database call.\nWe will not talk about the resource type here, since it is an advanced topic.",
    "scraped_at": "2025-08-29T13:30:42.141181"
  },
  {
    "tutorial": "HTML",
    "title": "HTML Tutorial",
    "url": "https://www.w3schools.com/html/default.asp",
    "content": "HTML Tutorial\nLearn HTML\nHTML is the standard markup language for Web pages.\nWith HTML you can create your own Website.\nHTML is easy to learn - You will enjoy it!\nHTML Tutorial\nStudy our HTML Tutorial for free, no registration needed.\nHTML Course + Certificate\nUpgrade your learning with our interactive HTML Course \n        and Get Certified.\nTip: Sign in to track your progress - it's free.\nLearning by Examples\nWith our \"Try it Yourself\" editor, you can edit the HTML code and view the \nresult in the browser:\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nHTML Examples\nThis tutorial supplements all explanations with clarifying examples.\nSee all HTML Examples\nHTML Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all HTML Exercises\nHTML Quiz Test\nTest your HTML skills with our HTML Quiz!\nStart HTML Quiz!\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nHTML References\nAt W3Schools you will find complete references about HTML elements, \nattributes, events, color names, entities, character-sets, URL encoding, \nlanguage codes, HTTP messages, browser support, and more:\nKickstart your career\nGet certified by completing the course\nVideo: HTML for Beginners",
    "scraped_at": "2025-08-29T13:30:45.462113"
  },
  {
    "tutorial": "HTML",
    "title": "Introduction to HTML",
    "url": "https://www.w3schools.com/html/html_intro.asp",
    "content": "HTML Introduction\nHTML is the standard markup language for creating Web pages.\nWhat is HTML?\nHTML stands for Hyper Text Markup Language\nHTML is the standard markup language for creating Web pages\nHTML describes the structure of a Web page\nHTML consists of a series of elements\nHTML elements tell the browser how to display the content\nHTML elements label pieces of content such as \"this is a heading\", \"this \n  is a paragraph\", \"this is a link\", etc.\nA Simple HTML Document\nExample\nExample Explained\nThe <!DOCTYPE html> declaration defines \nthat this document is an HTML5 document\n<!DOCTYPE html>\nThe <html> element is the root element of an HTML \npage\n<html>\nThe <head> element contains meta information about the \n HTML page\n<head>\nThe <title> element specifies a title for the \n HTML page (which is shown in the browser's title bar or in the page's tab)\n<title>\nThe <body> element defines the \n document's body, and is a container for all the visible contents, such as \n headings, paragraphs, images, hyperlinks, tables, lists, etc.\n<body>\nThe <h1> element defines a large heading\n<h1>\nThe <p> element defines a paragraph\n<p>\nWhat is an HTML Element?\nAn HTML element is defined by a start tag, some content, and an end tag:\nThe HTML element is everything from the start tag to the end tag:\nNote: Some HTML elements have no content (like the <br> \nelement). These elements are called empty elements. Empty elements do not have an end tag!\nWeb Browsers\nThe purpose of a web browser (Chrome, Edge, Firefox, Safari) is to read HTML documents and display them \ncorrectly.\nA browser does not display the HTML tags, but uses them to determine how to display the document:\nHTML Page Structure\nBelow is a visualization of an HTML page structure:\nNote: The content inside the <body> section \nwill be displayed in a browser. The content inside the <title> element will be \nshown in the browser's title bar or in the page's tab.\nHTML History\nSince the early days of the World Wide Web, there have been many versions of HTML:\nThis tutorial follows the latest HTML5 standard.\nVideo: HTML Introduction",
    "scraped_at": "2025-08-29T13:30:49.604387"
  },
  {
    "tutorial": "HTML",
    "title": "HTML Editors",
    "url": "https://www.w3schools.com/html/html_editors.asp",
    "content": "HTML Editors\nA simple text editor is all you need to learn HTML.\nLearn HTML Using Notepad or TextEdit\nWeb pages can be created and modified by using professional HTML editors.\nHowever, for learning HTML we recommend a simple text editor like Notepad (PC) or TextEdit (Mac).\nWe believe that using a simple text editor is a good way to learn HTML.\nFollow the steps below to create your first web page with Notepad or TextEdit.\nStep 1: Open Notepad (PC)\nWindows 8 or later:\nOpen the Start Screen (the window symbol at the bottom left on your screen). Type Notepad .\nWindows 7 or earlier:\nOpen Start > Programs > Accessories > Notepad\nStep 1: Open TextEdit (Mac)\nOpen Finder > Applications > TextEdit\nAlso change some preferences to get the application to \nsave files correctly. In Preferences > Format > choose \"Plain Text\"\nThen under \"Open and Save\", check the box that says \"Display HTML files as HTML code instead of formatted text\".\nThen open a new document to place the code.\nStep 2: Write Some HTML\nWrite or copy the following HTML code into Notepad:\nStep 3: Save the HTML Page\nSave the file on your computer. Select File > Save as in the Notepad menu.\nName the file \"index.htm\" and set the encoding to UTF-8 (which is the preferred encoding for HTML files).\nTip: You can use either .htm or .html as file extension. There is no difference; it is up to you.\nStep 4: View the HTML Page in Your Browser\nOpen the saved HTML file in your favorite browser (double click on the file, \nor right-click - and choose \"Open with\").\nThe result will look much like this:\nW3Schools Online Editor - \"Try it Yourself\"\nWith our free online editor, you can edit the HTML code and view the result in your browser.\nIt is the perfect tool when you want to test code fast. It also has color \ncoding and the ability to save and share code with others:\nExample\nClick on the \"Try it Yourself\" button to see how it works.\nW3Schools Spaces\nIf you want to create your own website and save your code online, try our free website builder , called W3schools Spaces :\nW3Schools Spaces\nW3Schools Spaces\nEverything you need right in the browser.\nVideo: HTML Editors",
    "scraped_at": "2025-08-29T13:30:54.429701"
  },
  {
    "tutorial": "HTML",
    "title": "HTML Basic",
    "url": "https://www.w3schools.com/html/html_basic.asp",
    "content": "HTML Basic Examples\nIn this chapter we will show some basic HTML examples.\nDon't worry if we use tags you have not learned about yet.\nHTML Documents\nAll HTML documents must start with a document type declaration: <!DOCTYPE html> .\n<!DOCTYPE html>\nThe HTML document itself begins with <html> and ends with </html> .\n<html>\n</html>\nThe visible part of the HTML document is between <body> and </body> .\n<body>\n</body>\nExample\nThe <!DOCTYPE> Declaration\nThe <!DOCTYPE> declaration represents the document type, and helps browsers to display web pages correctly.\n<!DOCTYPE>\nIt must only appear once, at the top of the page (before any HTML tags).\nThe <!DOCTYPE> declaration is not case sensitive.\n<!DOCTYPE>\nThe <!DOCTYPE> declaration for HTML5 is:\n<!DOCTYPE>\nHTML Headings\nHTML headings are defined with the <h1> to <h6> tags.\n<h1>\n<h6>\n<h1> defines the most important heading. <h6> defines the least important \nheading:\n<h1>\n<h6>\nExample\nHTML Paragraphs\nHTML paragraphs are defined with the <p> tag:\n<p>\nExample\nHTML Links\nHTML links are defined with the <a> tag:\n<a>\nExample\nThe link's destination is specified in the href attribute.\nhref\nAttributes are used to provide additional information about HTML elements.\nYou will learn more about attributes in a later chapter.\nHTML Images\nHTML images are defined with the <img> tag.\n<img>\nThe source file ( src ), alternative text ( alt ), width , and height are provided as attributes:\nsrc\nalt\nwidth\nheight\nExample\nHow to View HTML Source\nHave you ever seen a Web page and wondered \"Hey! How did they do that?\"\nView HTML Source Code:\nClick CTRL + U in an HTML page, or right-click on the page and select \"View Page Source\". This will open a \nnew tab \ncontaining the HTML source code of the page.\nInspect an HTML Element:\nRight-click on an element (or a blank area), and choose \"Inspect\" to see what elements are made up of (you will see both \nthe HTML and the CSS). You can also edit the HTML or CSS on-the-fly in the \nElements or Styles panel that opens.",
    "scraped_at": "2025-08-29T13:30:57.284250"
  },
  {
    "tutorial": "HTML",
    "title": "HTML Elements",
    "url": "https://www.w3schools.com/html/html_elements.asp",
    "content": "HTML Elements\nAn HTML element is defined by a start tag, some content, and an \nend tag.\nHTML Elements\nThe HTML element is everything from the start tag to the end tag:\nExamples of some HTML elements:\nNote: Some HTML elements have no content (like the <br> \nelement). These elements are called empty elements. Empty elements do not have an end tag!\nNested HTML Elements\nHTML elements can be nested (this means that elements can contain other elements).\nAll HTML documents consist of nested HTML elements.\nThe following example contains four HTML elements ( <html> , <body> , <h1> and <p> ):\n<html>\n<body>\n<h1>\n<p>\nExample\nExample Explained\nThe <html> element is the root element \nand it defines the whole HTML document.\n<html>\nIt has a start tag <html> and an end tag </html> .\n<html>\n</html>\nThen, inside the <html> element there is \na <body> element:\n<html>\n<body>\nThe <body> element defines the \ndocument's body.\n<body>\nIt has a start tag <body> and an end tag </body> .\n<body>\n</body>\nThen, inside the <body> element there \nare two other elements: <h1> and <p> :\n<body>\n<h1>\n<p>\nThe <h1> element defines a heading.\n<h1>\nIt has a start tag <h1> and an end tag </h1> :\n<h1>\n</h1>\nThe <p> element defines a paragraph.\n<p>\nIt has a start tag <p> and an end tag </p> :\n<p>\n</p>\nNever Skip the End Tag\nSome HTML elements will display correctly, even if you forget the end tag:\nExample\nHowever, never rely on this! Unexpected results and errors may occur if you forget the end tag!\nEmpty HTML Elements\nHTML elements with no content are called empty elements.\nThe <br> tag defines a line break, and \nis an empty element without a closing tag:\n<br>\nExample\nHTML is Not Case Sensitive\nHTML tags are not case sensitive: <P> means the same as <p> .\n<P>\n<p>\nThe HTML standard does not require lowercase tags, but W3C recommends lowercase in HTML, and demands lowercase for stricter document types like XHTML.\nAt W3Schools we always use lowercase tag names.\nHTML Tag Reference\nW3Schools' tag reference contains additional information about these tags and their attributes.\nFor a complete list of all available HTML tags, visit our HTML Tag Reference .\nVideo: HTML Elements",
    "scraped_at": "2025-08-29T13:31:00.688794"
  },
  {
    "tutorial": "HTML",
    "title": "HTML Attributes",
    "url": "https://www.w3schools.com/html/html_attributes.asp",
    "content": "HTML Attributes\nHTML attributes provide additional information about HTML elements.\nHTML Attributes\nAll HTML elements can have attributes\nAttributes provide additional information about elements\nAttributes are always specified in the start tag\nAttributes usually come in name/value pairs like: name=\"value\"\nThe href Attribute\nThe <a> tag defines a hyperlink. The href attribute specifies the URL of the page \nthe link goes to:\n<a>\nhref\nExample\nYou will learn more about links in our HTML Links\nchapter .\nThe src Attribute\nThe <img> tag is used to embed an \nimage in an HTML page. The src attribute \nspecifies the path to the image to be displayed:\n<img>\nsrc\nExample\nThere are two ways to specify the URL in the src attribute:\nsrc\n1. Absolute URL - Links to an external image that is hosted \non another website. Example: src=\"https://www.w3schools.com/images/img_girl.jpg\" .\nNotes: External images might be under copyright. If you do \nnot get permission to use it, you may be in violation of copyright laws. In \naddition, you cannot control external images; it can suddenly be removed or \nchanged.\n2. Relative URL - Links to an image that is hosted within \nthe website. Here, the URL does not include the domain name. If the URL begins \nwithout a slash, it will be relative to the current page. Example: src=\"img_girl.jpg\". \nIf the URL begins with a slash, it will be relative to the domain. Example: src=\"/images/img_girl.jpg\".\nTip: It is almost always best to use relative URLs. They \nwill not break if you change domain.\nThe width and height Attributes\nThe <img> tag should also contain the width and height attributes, which specify the width and \nheight of the image (in pixels):\n<img>\nwidth\nheight\nExample\nThe alt Attribute\nThe required alt attribute for the <img> tag specifies an \nalternate text for an image, if the image for some reason cannot be displayed. \nThis can be due to \na slow connection, or an error in the src attribute, or if the user uses a screen \nreader.\nalt\n<img>\nsrc\nExample\nExample\nSee what happens if we try to display an image that does not exist:\nYou will learn more about images in our HTML Images chapter .\nThe style Attribute\nThe style attribute is used to add styles to \nan element, such as color, font, size, and more.\nstyle\nExample\nYou will learn more about styles in our HTML Styles chapter .\nThe lang Attribute\nYou should always include the lang attribute \ninside the <html> tag, to declare the \nlanguage of the Web page. This is meant to assist search engines and browsers.\nlang\n<html>\nThe following example specifies English as the language:\nCountry codes can also be added to the language code in the lang attribute. So, the first two characters define the language of the HTML page, \nand the last two characters define the country.\nlang\nThe following example specifies English as the language and United States as \nthe country:\nYou can see all the language codes in our HTML Language Code Reference .\nThe title Attribute\nThe title attribute defines some extra \ninformation about an \nelement.\ntitle\nThe value of the title attribute will be displayed as a tooltip when \nyou mouse over the element:\nExample\nWe Suggest: Always Use Lowercase Attributes\nThe HTML standard does not require lowercase attribute names.\nThe title attribute (and all other attributes) can be written with uppercase or lowercase \nlike title or TITLE .\nHowever, W3C recommends lowercase attributes in HTML, and demands lowercase attributes for stricter document types like XHTML.\nAt W3Schools we always use lowercase attribute names.\nWe Suggest: Always Quote Attribute Values\nThe HTML standard does not require quotes around attribute values.\nHowever, W3C recommends quotes in HTML, and demands quotes for \nstricter document types like XHTML.\nGood:\nBad:\nSometimes you have to use quotes. This example will not display \nthe title attribute correctly, because it contains a space:\nExample\nAt W3Schools we always use quotes around attribute values.\nSingle or Double Quotes?\nDouble quotes around attribute values are the most common in HTML, but single \nquotes can also be used.\nIn some situations, when the attribute value itself contains double quotes, it is necessary to use single quotes:\nOr vice versa:\nChapter Summary\nAll HTML elements can have attributes\nThe href attribute of <a> specifies the URL of the page the link goes to\nhref\n<a>\nThe src attribute of <img> specifies the path to the image to be displayed\nsrc\n<img>\nThe width and height attributes \n  of <img> provide size information for images\nwidth\nheight\n<img>\nThe alt attribute of <img> provides an alternate text for an image\nalt\n<img>\nThe style attribute is used to add styles \n  to an element, such as color, font, size, and more\nstyle\nThe lang attribute \n  of the <html> tag declares the \n  language of the Web page\nlang\n<html>\nThe title attribute defines some extra \n  information about an element\ntitle\nHTML Attribute Reference\nA complete list of all attributes for each HTML element, is listed in our: HTML Attribute Reference .\nVideo: HTML Attributes",
    "scraped_at": "2025-08-29T13:31:03.791853"
  },
  {
    "tutorial": "HTML",
    "title": "HTML Headings",
    "url": "https://www.w3schools.com/html/html_headings.asp",
    "content": "HTML Headings\nHTML headings are titles or subtitles that you want to display on a webpage.\nExample\nHeading 1\nHeading 2\nHeading 3\nHTML Headings\nHTML headings are defined with the <h1> to <h6> tags.\n<h1>\n<h6>\n<h1> defines the most important heading. <h6> defines the least important heading.\n<h1>\n<h6>\nExample\nNote: Browsers automatically add some white space (a margin) before and after a heading.\nHeadings Are Important\nSearch engines use the headings to index the structure and content of your web pages.\nUsers often skim a page by its headings. It is important to use headings to show the document structure.\n<h1> headings should be used for main headings, followed by <h2> headings, then the less important <h3> , and so on.\n<h1>\n<h2>\n<h3>\nNote: Use HTML headings for headings only. Don't use headings to make text BIG or bold .\nBigger Headings\nEach HTML heading has a default size. However, you can specify the size for any heading \nwith the style attribute, using the CSS font-size property:\nstyle\nfont-size\nExample\nHTML Tag Reference\nW3Schools' tag reference contains additional information about these tags and their attributes.\nFor a complete list of all available HTML tags, visit our HTML Tag Reference .\nVideo: HTML Headings",
    "scraped_at": "2025-08-29T13:31:06.921054"
  },
  {
    "tutorial": "HTML",
    "title": "HTML Paragraphs",
    "url": "https://www.w3schools.com/html/html_paragraphs.asp",
    "content": "HTML Paragraphs\nA paragraph always starts on a new line, and is usually a block of text.\nHTML Paragraphs\nThe HTML <p> element defines a paragraph.\n<p>\nA paragraph always starts on a new line, and browsers automatically add some white space (a margin) before and after a paragraph.\nExample\nHTML Display\nYou cannot be sure how HTML will be displayed.\nLarge or small screens, and resized windows will create different results.\nWith HTML, you cannot change the display by adding extra spaces or extra lines in your HTML code.\nThe browser will automatically remove any extra spaces and lines when the page is \ndisplayed:\nExample\nHTML Horizontal Rules\nThe <hr> tag defines a thematic break in an HTML page, and is most often \ndisplayed as a horizontal rule.\n<hr>\nThe <hr> element is used to separate content (or define a change) in an HTML \npage:\n<hr>\nExample\nThe <hr> tag is an empty tag, which means that it has no end tag.\n<hr>\nHTML Line Breaks\nThe HTML <br> element defines a line break.\n<br>\nUse <br> if you want a line break (a new line) without starting a new paragraph:\n<br>\nExample\nThe <br> tag is an empty tag, which means that it has no end tag.\n<br>\nThe Poem Problem\nThis poem will display on a single line:\nExample\nSolution - The HTML <pre> Element\nThe HTML <pre> element defines preformatted text.\n<pre>\nThe text inside a <pre> element is displayed in a fixed-width font (usually \nCourier), and it preserves both spaces and line breaks:\n<pre>\nExample\nHTML Tag Reference\nW3Schools' tag reference contains additional information about HTML elements and their attributes.\nFor a complete list of all available HTML tags, visit our HTML Tag Reference .\nVideo: HTML Paragraphs",
    "scraped_at": "2025-08-29T13:31:09.946365"
  },
  {
    "tutorial": "HTML",
    "title": "HTML Styles",
    "url": "https://www.w3schools.com/html/html_styles.asp",
    "content": "HTML Styles\nThe HTML style attribute is used to add styles to an element, such as color, font, size, and more.\nstyle\nExample\nI am Red\nI am Blue\nI am Big\nThe HTML Style Attribute\nSetting the style of an HTML element, can be done with the style attribute.\nstyle\nThe HTML style attribute has the following syntax:\nstyle\nThe property is a CSS property. The value is a CSS value.\nYou will learn more about CSS later in this tutorial.\nBackground Color\nThe CSS background-color property defines the background color \nfor an HTML element.\nbackground-color\nExample\nSet the background color for a page to powderblue:\nExample\nSet background color for two different elements:\nText Color\nThe CSS color property defines the text color for \nan HTML element:\ncolor\nExample\nFonts\nThe CSS font-family property defines the font to be used  \nfor an HTML element:\nfont-family\nExample\nText Size\nThe CSS font-size property defines the text size for \nan HTML element:\nfont-size\nExample\nText Alignment\nThe CSS text-align property defines the horizontal text alignment for an HTML element:\ntext-align\nExample\nChapter Summary\nUse the style attribute for styling HTML elements\nstyle\nUse background-color for background color\nbackground-color\nUse color for text colors\ncolor\nUse font-family for text fonts\nfont-family\nUse font-size for text sizes\nfont-size\nUse text-align for text alignment\ntext-align\nVideo: HTML Styles",
    "scraped_at": "2025-08-29T13:31:13.015718"
  },
  {
    "tutorial": "HTML",
    "title": "HTML Text Formatting",
    "url": "https://www.w3schools.com/html/html_formatting.asp",
    "content": "HTML Text Formatting\nHTML contains several elements for defining text with a special meaning.\nExample\nThis text is bold\nThis text is italic\nThis is subscript and superscript\nHTML Formatting Elements\nFormatting elements were designed to display special types of text:\n<b> - Bold text\n<b>\n<strong> - Important text\n<strong>\n<i> - Italic text\n<i>\n<em> - Emphasized text\n<em>\n<mark> - Marked text\n<mark>\n<small> - Smaller text\n<small>\n<del> - Deleted text\n<del>\n<ins> - Inserted text\n<ins>\n<sub> - Subscript text\n<sub>\n<sup> - Superscript text\n<sup>\nHTML <b> and <strong> Elements\nThe HTML <b> element defines bold text, \nwithout any extra importance.\n<b>\nExample\nThe HTML <strong> element defines text \nwith strong importance. The content inside is typically displayed in bold.\n<strong>\nExample\nHTML <i> and <em> Elements\nThe HTML <i> element defines a part of \ntext in an alternate voice or mood. The content inside is typically displayed in \nitalic.\n<i>\nTip: The <i> tag is often used to indicate a technical term, \na phrase from another language, a thought, a ship name, etc.\n<i>\nExample\nThe HTML <em> element defines \nemphasized text. The content inside is typically displayed in italic.\n<em>\nTip: A screen reader will pronounce the words in <em> with an emphasis, using verbal stress.\n<em>\nExample\nHTML <small> Element\nThe HTML <small> element defines \nsmaller text:\n<small>\nExample\nHTML <mark> Element\nThe HTML <mark> element defines text \nthat should be marked or highlighted:\n<mark>\nExample\nHTML <del> Element\nThe HTML <del> element defines text \nthat has been deleted from a document. Browsers will usually strike a line \nthrough deleted text:\n<del>\nExample\nHTML <ins> Element\nThe HTML <ins> element defines a text \nthat has been inserted into a document. Browsers will usually underline inserted \ntext:\n<ins>\nExample\nHTML <sub> Element\nThe HTML <sub> element defines \nsubscript text. Subscript text appears half a character below the normal line, \nand is sometimes rendered in a smaller font. Subscript text can be used for \nchemical formulas, like H 2 O:\n<sub>\nExample\nHTML <sup> Element\nThe HTML <sup> element defines \nsuperscript text. Superscript text appears half a character above the normal \nline, and is sometimes rendered in a smaller font. Superscript text can be used \nfor footnotes, like WWW [1] :\n<sup>\nExample\nHTML Text Formatting Elements\nFor a complete list of all available HTML tags, visit our HTML Tag Reference .\nVideo: HTML Formatting",
    "scraped_at": "2025-08-29T13:31:15.989435"
  },
  {
    "tutorial": "CSS",
    "title": "CSS Tutorial",
    "url": "https://www.w3schools.com/css/default.asp",
    "content": "CSS Tutorial\nLearn CSS\nCSS is the language we use to style an HTML document.\nCSS describes how HTML elements should be displayed.\nThis tutorial will teach you CSS from basic to advanced.\nTip: Sign in to track your progress - it's free.\nExamples in Each Chapter\nThis CSS tutorial contains hundreds of CSS examples.\nWith our online editor, you can edit the CSS, and click on a button to view the result.\nCSS Example\nClick on the \"Try it Yourself\" button to see how it works.\nCSS Examples\nLearn from over 300 examples! With our editor, you can edit the CSS, and click on a\nbutton to view the result.\nGo to CSS Examples!\nUse the Menu\nWe recommend reading this tutorial, in the sequence listed in the menu.\nIf you have a large screen, the menu will always be present on the left.\nIf you have a small screen, open the menu by clicking the top menu sign ☰ .\nCSS Templates\nWe have created some responsive W3.CSS templates for you to use.\nYou are free to modify, save, share, and use them in all your projects.\nFree CSS Templates!\nCSS Exercises\nMany chapters in this tutorial end with an exercise where you can check your level of knowledge.\nSee all CSS Exercises\nCSS Quiz\nTest your CSS skills with a quiz.\nStart CSS Quiz!\nTrack Your Progress\nView your completed tutorials, exercises, and quizzes\nKeep an eye on your progress and daily streaks\nSet goals and create learning paths\nCreate your own personal website\nSign Up for Free\nNote: This is an optional feature. You can study at W3Schools without creating an account.\nCSS References\nAt W3Schools you will find complete CSS references of all properties and selectors with syntax, examples, browser support, and more.\nKickstart your career\nGet certified by completing the course",
    "scraped_at": "2025-08-29T13:31:18.670339"
  },
  {
    "tutorial": "CSS",
    "title": "CSS Introduction",
    "url": "https://www.w3schools.com/css/css_intro.asp",
    "content": "CSS Introduction\nWhat is CSS?\nCSS is the language we use to style a Web page.\nCSS stands for Cascading Style Sheets\nCSS describes how HTML elements are to be displayed on screen,  \n  paper, or in other media\nCSS saves a lot of work. It can control the layout of \n  multiple web pages all at once\nExternal stylesheets are stored in CSS files\nCSS Demo - One HTML Page - Multiple Styles!\nHere we will show one HTML page displayed with four different stylesheets. \nClick on the \"Stylesheet 1\", \"Stylesheet 2\", \"Stylesheet 3\", \"Stylesheet 4\" \nlinks below to see the different styles:\nWhy Use CSS?\nCSS is used to define styles for your web pages, including the design, layout \nand variations in display for different devices and screen sizes.\nCSS Example\nCSS Saves a Lot of Work!\nThe CSS definitions are normally saved in an external .css file.\nWith an external stylesheet file, you can change the look of an entire website by changing just one file!\nVideo: CSS Introduction",
    "scraped_at": "2025-08-29T13:31:21.448053"
  },
  {
    "tutorial": "CSS",
    "title": "CSS Syntax",
    "url": "https://www.w3schools.com/css/css_syntax.asp",
    "content": "CSS Syntax\nCSS Syntax\nA CSS rule consists of a selector and a declaration block:\nThe selector points to the HTML element you want to style.\nThe declaration block contains one or more declarations separated by \nsemicolons.\nEach declaration includes a CSS property name and a value, separated by a colon.\nMultiple CSS declarations are separated with semicolons, and declaration \nblocks are surrounded by curly braces.\nExample\nIn this example all <p> elements will be center-aligned, with a red \ntext color:\np is a selector in CSS (it points to the HTML element you want to style: \n<p>).\np\ncolor is a property, and red is the property value\ncolor\nred\ntext-align is a property, and center is the property value\ntext-align\ncenter\nYou will learn much more about CSS selectors and CSS properties in the next chapters!\nVideo: CSS Syntax",
    "scraped_at": "2025-08-29T13:31:24.125850"
  },
  {
    "tutorial": "CSS",
    "title": "CSS Selectors",
    "url": "https://www.w3schools.com/css/css_selectors.asp",
    "content": "CSS Selectors\nCSS Selectors\nCSS selectors are used to \"find\" (or select) the HTML elements you \nwant to style.\nWe can divide CSS selectors into five categories:\nSimple selectors (select elements based on name, id, class)\nCombinator selectors (select  \n  elements based on a specific relationship between them)\nPseudo-class selectors (select elements based on a certain state)\nPseudo-elements selectors (select \n  and style a part of an element)\nAttribute selectors (select elements based on \n  an attribute or attribute value)\nThis page will explain the most basic CSS selectors.\nThe CSS element Selector\nThe element selector selects HTML elements based on the element name.\nelement\nExample\nHere, all <p> elements on the page will be \ncenter-aligned, with a red text color:\nThe CSS id Selector\nThe id selector uses the id attribute of an HTML element to select a specific element.\nid\nThe id of an element is unique within a page, so the id selector is \nused to \nselect one unique element!\nTo select an element with a specific id, write a hash (#) character, followed by \nthe id of the element.\nExample\nThe CSS rule below will be applied to the HTML element with id=\"para1\":\nNote: An id name cannot start with a number!\nThe CSS class Selector\nThe class selector selects HTML elements with a specific class attribute.\nclass\nTo select elements with a specific class, write a period (.) character, followed by the \nclass name.\nExample\nIn this example all HTML elements with class=\"center\" will be red and center-aligned:\nYou can also specify that only specific HTML elements should be affected by a class.\nExample\nIn this example only <p> elements with class=\"center\" will be \nred and center-aligned:\nHTML elements \ncan also refer to more than one class.\nExample\nIn this example the <p> element will be styled according to class=\"center\" \nand to class=\"large\":\nNote: A class name cannot start with a number!\nThe CSS Universal Selector\nThe universal selector (*) selects all HTML \nelements on the page.\nuniversal selector (*)\nExample\nThe CSS rule below will affect every HTML element on the page:\nThe CSS Grouping Selector\nThe grouping selector selects all the HTML elements with the same style \ndefinitions.\ngrouping selector\nLook at the following CSS code (the h1, h2, and p elements have the same \nstyle definitions):\nIt will be better to group the selectors, to minimize the code.\nTo group selectors, separate each selector with a comma.\nExample\nIn this example we have grouped the selectors from the code above:\nAll CSS Simple Selectors\nVideo: CSS Simple Selectors",
    "scraped_at": "2025-08-29T13:31:27.663317"
  },
  {
    "tutorial": "CSS",
    "title": "How to add CSS",
    "url": "https://www.w3schools.com/css/css_howto.asp",
    "content": "How To Add CSS\nHow to Add CSS\nWhen a browser reads a style sheet, it will format the HTML document according to the information in the style sheet.\nThere are three ways of inserting a style sheet:\nExternal CSS\nInternal CSS\nInline CSS\nExternal CSS\nWith an\nexternal style sheet, you can change the look of an entire website by changing \njust one file!\nEach HTML page must include a reference to the external style sheet file inside \nthe <link> element, inside the head section.\nExample\nExternal styles are defined within the <link> element, inside the <head> section of an HTML page:\nAn external style sheet can be written in any text editor, and must be saved with a .css extension.\nThe external .css file should not contain any HTML tags.\nHere is how the \"mystyle.css\" file looks:\n\"mystyle.css\"\nNote: Do not add a space between the property value (20) and the unit \n  (px): Incorrect (space): margin-left: 20 px; Correct (no space): margin-left: 20px;\nmargin-left: 20 px;\nmargin-left: 20px;\nInternal CSS\nAn internal style sheet may be used if one single HTML page has a unique style.\nThe internal style is defined inside the <style> element, inside the head \nsection.\nExample\nInternal styles are defined within the <style> element, inside the <head> section of an HTML page:\nInline CSS\nAn inline style may be used to apply a unique style for a single element.\nTo use inline styles, add the style attribute to the relevant element. The\nstyle attribute can contain any CSS property.\nExample\nInline styles are defined within the \"style\" attribute of the relevant \n  element:\nTip: An inline style loses many of the advantages of a style sheet (by mixing\ncontent with presentation). Use this method sparingly.\nMultiple Style Sheets\nIf some properties have been defined for the same selector (element) in different style sheets,\nthe value from the last read style sheet will be used.\nAssume that an external style sheet has the following style for the <h1> element:\nThen, assume that an internal style sheet also has the following style for the <h1> element:\nExample\nIf the internal style is defined after the link to the external style sheet, the <h1> elements will be \n\"orange\":\nExample\nHowever, if the internal style is defined before the link to the external style sheet, the <h1> elements will be \n\"navy\":\nCascading Order\nWhat style will be used when there is more than one style specified for an HTML element?\nAll the styles in a page will \"cascade\" into a new \"virtual\" style\nsheet by the following rules, where number one has the highest priority:\nInline style (inside an HTML element)\nExternal and internal style sheets (in the head section)\nBrowser default\nSo, an inline style has the highest priority, and will override external and \ninternal styles and browser defaults.\nTry it Yourself »\nEver heard about W3Schools Spaces ? Here you can create your own website, or save code snippets for later use, for free.\n* no credit card required\nVideo: How to add CSS to HTML",
    "scraped_at": "2025-08-29T13:31:30.781243"
  },
  {
    "tutorial": "CSS",
    "title": "CSS Comments",
    "url": "https://www.w3schools.com/css/css_comments.asp",
    "content": "CSS Comments\nCSS Comments\nComments are used to explain the CSS code, and may help when you edit the \nsource code at a later date.\nComments are also used to temporarily disable sections of CSS code within a \nstylesheet.\nComments are ignored by browsers!\nA CSS comment is placed inside the HTML <style> element, and starts with /* and ends with */ :\n<style>\n/*\n*/\nExample\nYou can add comments wherever you want in the code:\nExample\nEven in the middle of a code line:\nExample\nComments can also span \nmultiple lines:\nExample\nHTML and CSS Comments\nFrom the HTML tutorial, you learned that you can add comments to your HTML source by using the <!--...--> syntax.\n<!--...-->\nIn the following example, we use a combination of HTML and CSS comments:\nExample\nVideo: CSS Comments",
    "scraped_at": "2025-08-29T13:31:35.641301"
  },
  {
    "tutorial": "CSS",
    "title": "CSS Errors",
    "url": "https://www.w3schools.com/css/css_errors.asp",
    "content": "CSS Errors\nCSS Errors\nErrors in CSS can lead to unexpected behavior or styles not being applied correctly. This page shows common CSS mistakes and how to avoid them.\nMissing Semicolons\nForgetting a semicolon at the end of a property declaration can break the style rule.\nExample\nInvalid Property Names\nUsing a property name that does not exist will simply be ignored by the browser.\nExample\nInvalid Values\nCorrect properties but invalid values will also be ignored.\nExample\nUnclosed Braces\nIf you forget to close a brace } , the entire rule may be ignored.\n}\nExample\nExtra Colons or Braces\nTypos like extra colons or misplaced braces can cause rules to break.\nExample\nTips to Avoid CSS Errors\nUse a code editor with syntax highlighting.\nValidate your CSS with a CSS linter or validator.\nWrite CSS in small sections and test frequently.",
    "scraped_at": "2025-08-29T13:31:40.045232"
  },
  {
    "tutorial": "CSS",
    "title": "CSS Colors",
    "url": "https://www.w3schools.com/css/css_colors.asp",
    "content": "CSS Colors\nCSS Colors\nIn CSS, colors are specified by using a predefined color name, or with a RGB, HEX, HSL, RGBA, HSLA value.\nCSS Color Names\nIn CSS, a color can be specified by using a predefined color name:\nTry it Yourself »\nCSS/HTML support 140 standard color names .\nCSS Background Color\nYou can set the background color for HTML elements:\nExample\nCSS Text Color\nYou can set the color of text:\nHello World\nLorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.\nUt wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.\nExample\nCSS Border Color\nYou can set the color of borders:\nHello World\nHello World\nHello World\nExample\nCSS Color Values\nIn CSS, colors can also be specified using RGB values, HEX values, HSL \nvalues, RGBA values, and HSLA values:\nSame as color name \"Tomato\":\nSame as color name \"Tomato\", but 50% transparent:\nExample\nLearn more about Color Values\nYou will learn more about RGB , HEX and HSL in the next chapters.\nVideo: CSS Colors Introduction",
    "scraped_at": "2025-08-29T13:31:46.127406"
  },
  {
    "tutorial": "CSS",
    "title": "CSS RGB and RGBA Colors",
    "url": "https://www.w3schools.com/css/css_colors_rgb.asp",
    "content": "CSS RGB Colors\nRGB Value\nAn RGB color value represents RED, GREEN, and BLUE light sources.\nIn CSS, a color can be specified as an RGB value, using this formula:\nrgb( red, green , blue )\nEach parameter (red, green, and \nblue) defines the intensity of the color between 0 and 255.\nFor example, rgb(255, 0, 0) is displayed as red, \nbecause red is set to its highest value (255) and the others are \nset to 0.\nTo display black, set all color parameters to 0, like this: rgb(0, 0, 0).\nTo display white, set all color parameters to 255, like \nthis: rgb(255, 255, 255).\nExperiment by mixing the RGB values below:\nRED\nGREEN\nBLUE\nExample\nShades of gray are often defined using equal values for all the 3 light sources:\nExample\nRGBA Value\nRGBA color values are an extension of RGB color values with an alpha channel \n- which specifies the opacity for a color.\nAn RGBA color value is \nspecified with:\nrgba( red, green , blue, \nalpha )\nThe alpha parameter is a number \nbetween 0.0 (fully transparent) and 1.0 (not transparent at all):\nExperiment by mixing the RGBA values below:\nRED\nGREEN\nBLUE\nALPHA\nExample\nVideo: CSS Colors RGB & RGBA",
    "scraped_at": "2025-08-29T13:31:50.932612"
  },
  {
    "tutorial": "CSS",
    "title": "CSS HEX Colors",
    "url": "https://www.w3schools.com/css/css_colors_hex.asp",
    "content": "CSS HEX Colors\nHEX Value\nA hexadecimal color is specified with: #RRGGBB.\nIn CSS, a color can be specified using a hexadecimal value in the form:\n# rrggbb\nWhere rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff (same as decimal 0-255).\nFor example, #ff0000 is displayed as red, because red is set to its highest value (ff) and the others are set to \nthe lowest value (00).\nTo display black, set all values to 00, like this: #000000.\nTo display white, set all values to ff, like \nthis: #ffffff.\nExperiment by mixing the HEX values below:\nRED\nGREEN\nBLUE\nExample\nShades of gray are often defined using equal values for all the 3 light sources:\nExample\n3 Digit HEX Value\nSometimes you will see a 3-digit hex code in the CSS source.\nThe 3-digit hex code is a shorthand for some 6-digit hex codes.\nThe 3-digit hex code has the following form:\n# rgb\nWhere r, g, and b represent the red, green, and blue components with values between 0 and f.\nThe 3-digit hex code can only be used when both the values (RR, GG, and BB) are the same for \neach component. So, if we have #ff00cc, it can be written like this: #f0c.\nHere is an example:\nExample\nVideo: CSS Colors Hex",
    "scraped_at": "2025-08-29T13:31:53.913224"
  }
]